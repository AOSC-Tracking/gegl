Webpages for Gegl (or see the docs dir): 

http://www.mindspring.com/~calvinw/geglClasses.html
http://www.mindspring.com/~calvinw/genericChannelData.html
http://www.mindspring.com/~calvinw/genericImageLanguage.html

If possible, you should use Gob 0.93.1 (in gnome cvs or from
http://ftp.5z.com/pub/gob/) or later with gegl. Earlier
versions of Gob may not work as well.

For more information on gob see http://www.5z.com/jirka/gob.html. 


About the use of private, protected and public as used by gob:

Gob allows "private", "protected" and "public" variables and
methods.  In gegl we use these keywords as follows:

Variables:

1) "public" variables appear in the class struct in class.h,
available to all.

2) "protected" variables are not used in gegl for now.

3) "private" variables in gegl class files are similar to
C++-style "protected" variables, in that these gob "private"
variables are made available to subclasses by including the
gob-generated class's private header (class-private.h) in the
subclass.

Methods: 

1)"public" methods are available to all through the class.h
header.

2)"protected" methods are available to subclasses by virtue of
being included in the class's class-private.h header.

3)"private" methods are available only to the class where they
are defined  They are static functions in the class.c file.  

In short, methods are like in C++. And for variables, gob
"private" means C++-protected and there is no gob "protected"
used in gegl.






There is some support for remaking generated .c and .h files
automatically.  Look in gegl/gegl/Makefile.am for rules at the
bottom.

>make clean   

removes *.o's but not .h's or .c's or any .gobs

>make gobclean 

removes gob generated .c and .h files, leaves all .gobs, and all .gils.

>make gilclean 

removes gob generated .c and .h files, gil generated .gobs, leaves .gils
and non-gil generated .gobs.
               
Dependencies more or less work so if you edit a .gil or .gob file, the
make will pick up that depend and rerun gob or codegen for you before
compiling

The testgegl program just creates some operators and runs them.
There is a PrintOp for debugging. See testgegl.c for details.

The testgeglfile program has code for reading tiffs and
displaying images in a gtk window. You can use this for testing
op classes as well. 

The arguments for testgeglfile are:

>testgeglfile A.tiff B.tiff [data_type]

where data type is one of float,u8,u16,u16_4k.
float is the default, and this is the default data type
for gegl at present. 

To use the other data types you have to change the Makefile.am
to run codegen with another data type. This will all be automated
and change once the codegen preprocessor is in place. See the 
docs. 

calvinw@mindspring.com
