Webpages for Gegl (also see the docs dir): 

http://www.gegl.org

Gegl is tested with Gob 1.0.1 (available from gnome cvs or 
http://ftp.5z.com/pub/gob/).

For more information on gob see: 
http://www.5z.com/jirka/gob.html. 

Building Gegl
-------------

.gil files contain code that have generic image language blocks 
     embedded in it. 
.gob files contain code in gtk-object-builder format.

So roughly 

gil code -----> gob code -----> regular c  
         codegen         gob

But only some .gob files are generated from .gil files. Others
dont need to be generated since they contain no gil code.  

When you type make in the top dir, the following should occur:

1)In the codegen subdir, the code generating tool codegen 
is built in the codegen directory --this will require a lex/yacc 
(or flex/bison) installed somewhere.

2)In the gegl subdir, codegen runs on each .gil file.
and generates a corresponding .gob file from these.

3)In the gegl subdir gob runs on all .gob files and generates
gegl-whatever-class.h (public header) and 
gegl-whatever-class-private.h (private header) and
gegl-whatever-class.c (class file).

4)In the gegl subdir, regular c files get compiled to
the gegl lib and some test programs are built.

Cleaning
--------

>make clean   

removes just *.o's 

>make gobclean 

removes gob generated .c and .h files 
but leaves .gob and .gil files.

>make gilclean 

removes gob generated .c and .h files and gil generated .gobs 
but leaves .gil and any nongenerated .gob files.
               
Dependencies more or less work so if you edit a .gil or .gob file, 
the make will pick up that dependency and rerun gob or codegen for you 
before compiling the c code. But you will notice some odd dependencies
and regeneration of things at odd times. Hopefully we'll fix these
soon.

About the use of private, protected and public as used by Gob
-------------------------------------------------------------

Gob allows "private", "protected" and "public" variables and
methods.  In gegl we use these keywords as follows:

For variables:

1) "public" gob variables appear in the class struct in the 
class 's public header file(ie in the gegl-whatever-class.h 
file), and are visible and available to all.

2) "protected" gob variables are not used in gegl for now.

3) "private" gob variables in gegl class files are similar to
C++-style "protected" variables, in that these gob "private"
variables are made available to subclasses by including the
gob-generated class's private header (gegl-whatever-class-private.h) 
in the subclass.

For methods: 

1)"public" gob methods are available to all through the class's
public header file gegl-whatever-class.h.

2)"protected" gob methods are available to subclasses by virtue of
of having their declaration in the class's private header file
(gegl-whatever-class-private.h). 

3)"private" gob methods are available only to the class where they
are defined.  They are static functions in the class's .c file
(gegl-whatever-class.c).  

In short, for methods, visibility corresponds to the C++ interpretation.

But for variables, gob "private" corresponds to C++-protected and there 
is no gob "protected" used in gegl.

Test programs
-------------

The testgegl program just creates some operators and runs them.
There is a PrintOp for debugging. See testgegl.c for details.

The testgeglfile program has code for reading tiffs and
displaying tiff images in a gtk window. You can use this for testing
op classes as well.  

The arguments for testgeglfile are:

>testgeglfile A.tiff B.tiff [data_type]

where data type is one of float,u8,u16,u16_4k.
float is the default, and this is the default data type
for gegl at present. 

To use the other data types you have to change the Makefile.am
to run codegen with another data type. This will all be automated
and change once the preprocessor for codegen is in place. See the 
genericImageLanguage.html doc for details. 

calvinw@mindspring.com
