Webpages for Gegl (also see the docs dir): 

http://www.gegl.org

Building Gegl
-------------

When you type make in the top dir, the following should occur:

1)In the tools/testsuite subdir, a xUnit testing tool gets built. 

2)In the codegen subdir, the code generating tool codegen is built. This will
require flex/bison (or lex/yacc) installed somewhere.

3)In the gil subdir, the (experimental) code generating tool gil is built. This
will require flex/bison (or lex/yacc) installed somewhere. NOTE: gil is
currently not used, but will eventually replace codegen above. 

4)In the gegl subdir, codegen runs on each .gil file and generates a
corresponding .c file.

5)In the gegl subdir, regular C and header files get compiled to the gegl lib.

6)In the tests subdir, some tests get built and run, using the testsuite tool
built in step 5 above.

codegen 
--------

Currently codegen is set to generate code for the floating point case by
default. You can change this by altering the line 

%.gob : %.gil 
	../codegen/codegen ...blah blah...

in gegl/Makefile.am to run the case you want. Soon codegen will be replaced by
a new code generator (called gil, in the gegl/gil directory) which generates
abstract syntax trees for the gil code, so will do more powerful code
generation. 

Eventually there will be a way to generate code for whichever types you are
interested in, and those datatypes/colormodels will get compiled in. Currently
codegen just generates one specified data type (8bit, 16bit(integer) or float)
for each .gil file.  

calvinw@mindspring.com
