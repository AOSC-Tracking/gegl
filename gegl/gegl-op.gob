%h{
#include "gegl-node.h"

#ifndef __TYPEDEF_GEGL_TILE__
#define __TYPEDEF_GEGL_TILE__
     typedef struct _GeglTile  GeglTile;
#endif

#ifndef __TYPEDEF_GEGL_IMAGE_BUFFER__
#define __TYPEDEF_GEGL_IMAGE_BUFFER__
     typedef struct _GeglImageBuffer  GeglImageBuffer;
#endif

%}

%privateheader{
#ifndef __TYPEDEF_GEGL_OP_REQUEST__
#define __TYPEDEF_GEGL_OP_REQUEST__
typedef struct _GeglOpRequest GeglOpRequest;
#endif

struct _GeglOpRequest 
{
  GeglTile *tile;
  GeglRect rect; 
};
%}


%{
#include "gegl-op.h"
#include "gegl-op-private.h"
#include "gegl-node-private.h"
#include "gegl-object-private.h"
#include "gegl-image-buffer.h"
#include "gegl-image-manager.h"
#include "gegl-image-manager-private.h"  /*friend*/
#include "gegl-utils.h"
%}

class Gegl:Op from Gegl:Node {

  /**
   * constructor:
   * @self: a #GeglOp.
   * @inputs: #GeglNode list.
   *
   * Initialize the #GeglOp.
   *
   * Returns: TRUE if constructed successfully.
   **/ 
  protected
  gboolean
  constructor(self,
              GList *inputs)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
       
    /* Chain up */
    if (!gegl_node_constructor (GEGL_NODE(self),inputs))
      return FALSE;

    return TRUE;
  }


  /**
   * apply:
   * @self: a #GeglOp.
   * @dest: a #GeglImageBuffer dest image.
   * @roi: a #GeglRect region of interest.
   *
   * This evaluates the graph rooted on this op.
   *
   **/ 
  virtual public
  void
  apply(self,
        GeglImageBuffer *dest,
        GeglRect *roi)
  {
    /* Get the singleton image manager. */
    GeglImageManager *image_manager = gegl_image_manager_instance();

    /* Call image manager, which does the operation. */
    gegl_image_manager_apply(image_manager,self,dest,roi);
  }

  
  /**
   * prepare:
   * @self: a #GeglOp.
   * @request_list: #GeglOpRequest list.
   *
   *  Prepares to do the operation. Subclasses set up for the operation here.
   *  Inputs are completely determined when this is called.  
   *
   **/
  virtual protected void prepare (self, GList *request_list);


  /**
   * process:
   * @self: a #GeglOp.
   * @request_list: #GeglOpRequest list.
   *
   *  Does the operation.
   *
   **/
  virtual protected void process(self, GList *request_list); 


  /**
   * finish:
   * @self: a #GeglOpe.
   * @request_list: #GeglOpRequest list.
   *
   * Cleans up after the operation.
   *
   **/
  virtual protected void finish (self, GList *request_list);

}
