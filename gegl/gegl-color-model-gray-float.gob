%h{
#include "gegl-color-model-gray.h"
%}
%{
#include "gegl-color-model-gray-float.h"
#include "gegl-color-model-gray-float-private.h"
#include "gegl-color-model-gray-private.h"
#include "gegl-color-model-private.h"
#include "gegl-color.h"
%}

class Gegl:Color:Model:Gray:Float from Gegl:Color:Model:Gray {

  public
  GeglColorModelGrayFloat *	
  new(gboolean has_alpha, 
      gboolean is_premult)
  {
    GeglColorModelGrayFloat * self = GEGL_COLOR_MODEL_GRAY_FLOAT(GET_NEW);
  
    /*Call the constructor */
    if (!constructor(self, has_alpha, is_premult))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }
  
  protected
  gboolean 
  constructor(self, 
              gboolean has_alpha, 
              gboolean is_premult)
  {
    GeglColorModelPrivate *color_modelP = (GeglColorModelPrivate*)
      (GEGL_COLOR_MODEL (self)->_priv);

    if (GEGL_OBJECT(self)->constructed) 
        return FALSE;
    
    /* Chain up to superclass*/
    if (!gegl_color_model_gray_constructor (
         GEGL_COLOR_MODEL_GRAY(self), has_alpha, is_premult))
        return FALSE;

    color_modelP->data_type = FLOAT;
    color_modelP->channel_data_type_name = NULL;
    color_modelP->bytes_per_channel = sizeof(float);
    color_modelP->bytes_per_pixel = 
                            color_modelP->bytes_per_channel * 
                            color_modelP->num_channels;

    return TRUE;
  }
  
  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  override (Gegl:Color:Model) 
  void 
  set_color (GeglColorModel *cm, 
             GeglColor *color, 
             GeglColorConstant constant)
  {
    GeglChannelValue * channel_values = 
                          gegl_color_get_channel_values(color); 
    gboolean has_alpha = gegl_color_model_has_alpha (cm); 
    GeglColorModelGray * cm_gray = GEGL_COLOR_MODEL_GRAY(cm);
    
    gint g = gegl_color_model_gray_get_gray_index (cm_gray);
    gint a = gegl_color_model_alpha_channel (GEGL_COLOR_MODEL(cm_gray));

    switch (constant) 
      { 
        case COLOR_WHITE:
          channel_values[g].f = 1.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_BLACK:
          channel_values[g].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_RED:
          channel_values[g].f = 0.3;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_GREEN:
          channel_values[g].f = 0.6;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_BLUE:
          channel_values[g].f = 0.1;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_GRAY:
        case COLOR_HALF_WHITE:
          channel_values[g].f = 0.5;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_WHITE_TRANSPARENT:
          channel_values[g].f = 1.0;
          if (!has_alpha)
            channel_values[a].f = 0.0;
          break;
        case COLOR_TRANSPARENT:
        case COLOR_BLACK_TRANSPARENT:
          channel_values[g].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 0.0;
          break;
      }
   }

  
  override (Gegl:Color:Model) 
  void
  convert_to_xyz (GeglColorModel *cm, 
                  gfloat **dest_data, 
                  guchar **src_data, 
                  gint width)
  {
    /* convert from float xyz to float gray */

    /*  
      __  __      __                         __  __  __
      | X  |      | 0.412453 0.357580 0.180423 | | R  |
      | Y  |   =  | 0.212671 0.715160 0.072169 | | G  |
      | Z  |      | 0.019334 0.119193 0.950227 | | B  |
      --  --      ---                        --- --  --
    */
	
    gfloat m00 = 0.412453;
    gfloat m10 = 0.357580;
    gfloat m20 = 0.180423;
    gfloat m01 = 0.212671;
    gfloat m11 = 0.715160;
    gfloat m21 = 0.072169;
    gfloat m02 = 0.019334;
    gfloat m12 = 0.119193;
    gfloat m22 = 0.950227;

    gfloat *src_g;
    gfloat *src_a = NULL;
    gfloat *dest_x, *dest_y, *dest_z; 
    gfloat *dest_a = NULL; 

    gboolean has_alpha = gegl_color_model_has_alpha(cm);

    src_g = (gfloat*) src_data[0];

    dest_x = dest_data[0];
    dest_y = dest_data[1];
    dest_z = dest_data[2];
      
    if(has_alpha)
      {
	src_a = (gfloat*) src_data[1];
	dest_a = dest_data[3]; 
      }
      
    while(width--)
      {
	*dest_x++ = (m00 + m10 + m20) * *src_g;
	*dest_y++ = (m01 + m11 + m21) * *src_g;
	*dest_z++ = (m02 + m12 + m22) * *src_g++;
	if (has_alpha)
          *dest_a++ = *src_a++;
      }
  } 

  override (Gegl:Color:Model) 
  void
  convert_from_xyz (GeglColorModel *cm, 
                    guchar **dest_data, 
                    gfloat **src_data, 
                    gint width)
  {
    /* convert from float xyz to float gray */

    /*
      __  __      __                               __  __  __
      | R  |      | 3.240479   -1.537150   -0.498535 | | X  |
      | G  |   =  |-0.969256    1.875991    0.041556 | | Y  |
      | B  |      | 0.055648   -0.204043    1.057311 | | Z  |
      --  --      ---                             ---- --  --
    */
    gfloat m00 =  3.240479;
    gfloat m10 = -1.537150;
    gfloat m20 = -0.498535;
    gfloat m01 = -0.969256;
    gfloat m11 =  1.875991;
    gfloat m21 =  0.041556;
    gfloat m02 =  0.055648;
    gfloat m12 = -0.204043;
    gfloat m22 =  1.057311;

    gfloat R, G, B, *dest_g; 
    gfloat *dest_a = NULL;
    gfloat *src_x, *src_y, *src_z; 
    gfloat *src_a = NULL;
    
    gboolean has_alpha = gegl_color_model_has_alpha(cm);

    dest_g = (gfloat*) dest_data[0];

    src_x = src_data[0];
    src_y = src_data[1];
    src_z = src_data[2];

    if (has_alpha)
      {
	dest_a = (gfloat*) dest_data[1];
	src_a = src_data[3];
      }
    
    while (width--)
      {
	R = m00 * *src_x + m10 * *src_y + m20 * *src_z;
	G = m01 * *src_x + m11 * *src_y + m21 * *src_z;
	B = m02 * *src_x++ + m12 * *src_y++ + m22 * *src_z++;
	*dest_g++ = 0.3 * R + 0.6 * G + 0.1 * B;
	if (has_alpha)
	  *dest_a++ = *src_a++;
      }
  }

  override (Gegl:Color:Model)
  void
  convert_to_u8 (GeglColorModel *cm, 
                 guint8 **dest_data, 
                 guchar **src_data, 
                 gint width)
  {
    /* convert float gray data to u8 gray data */

    gfloat	    *src_g;
    gfloat          *src_a = NULL;
    guint8	    *dest_g; 
    guint8          *dest_a = NULL;
    gboolean	    has_alpha = gegl_color_model_has_alpha(cm);
    
    src_g = (gfloat*) src_data[0];
    if (has_alpha)
      src_a = (gfloat*) src_data[1];
    
    dest_g = dest_data[0];
    if (has_alpha)
      dest_a = dest_data[1];

    while (width--)
      {
        *dest_g++ = CLAMP(ROUND(*src_g++ * 255),0,255);
        if (has_alpha)
          *dest_a++ = CLAMP(ROUND(*src_a++ * 255),0,255);
      } 
  }

  override (Gegl:Color:Model)
  void
  convert_to_rgb (GeglColorModel *cm, 
                  guchar **dest_data, 
                  guchar **src_data, 
                  gint width)
  {
    /* convert float gray data to float rgb data */

    gfloat          *dest_r, *dest_g, *dest_b; 
    gfloat          *dest_a = NULL;
    gfloat          *src_g; 
    gfloat          *src_a = NULL;
    gboolean        has_alpha = gegl_color_model_has_alpha(cm);

    src_g = (gfloat*) src_data[0];
    if (has_alpha)
      src_a = (gfloat*) src_data[1];

    dest_r = (gfloat*) dest_data[0];
    dest_g = (gfloat*) dest_data[1];
    dest_b = (gfloat*) dest_data[2];
    if (has_alpha)
      dest_a = (gfloat*) dest_data[3];

    while (width--)
      {
	*dest_r++ = *src_g;
	*dest_g++ = *src_g;
	*dest_b++ = *src_g++;
	if (has_alpha)
	  *dest_a++ = *src_a++;
      } 
  }
}

