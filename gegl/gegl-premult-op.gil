%h{
#include "gegl-single-src-op.h"
%}
%{
#include "gegl-premult-op.h"
#include "gegl-premult-op-private.h"
#include "gegl-single-src-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-private.h"
#include "gegl-image-iterator.h"
#include "gegl-color.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}

class Gegl:Premult:Op from Gegl:Single:Src:Op {

  
  public 
  GeglPremultOp *
  new (GeglImage *src)
  {
    GeglPremultOp * self = GEGL_PREMULT_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, src)) 
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
              GeglImage *src)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
    
    /* Chain up */
    if (!gegl_single_src_op_constructor (
          GEGL_SINGLE_SRC_OP(self), src))
      return FALSE;

    /* ref and sink it */
    gtk_object_ref(GTK_OBJECT(self));
    gtk_object_sink(GTK_OBJECT(self));

    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  override(Gegl:Op)
  void
  prepare(GeglOp *op,
          GeglImage *dest,
	  GeglRect *dest_rect)
  {
    GeglPointOp *point_op = GEGL_POINT_OP (op);
    GeglPointOpClass *point_op_class = 
      GEGL_POINT_OP_CLASS(GTK_OBJECT(point_op)->klass);

    /* Save these so we can get them quickly in scanline func
       below */
    gegl_op_save_alphas(op);

    {
      gboolean src_has_alpha = op->_priv->input_has_alpha[0];

      if(src_has_alpha)
	point_op_class->scanline_func = 
	  gegl_premult_op_scanline_COLORSPACE_DATATYPE;
      else
	{
	  point_op_class->scanline_func = NULL;
	  g_warning("gegl_premult_op_prepare: dest has no alpha channel\n");
	} 
    }
  } 

  private 
  void
  scanline_COLORSPACE_DATATYPE (GeglPointOp *point_op,
                                GeglImageIterator *dest_iter, 
		                GeglImageIterator **src_iters)
  {
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha);
    Pixel src(color,alpha);
    GENERIC_IMAGE_DECL_END

    gegl_image_iterator_get_scanline_data (dest_iter,
                (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data (src_iters[0],
                (guchar**)src_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT 

    while (width--)
      {
        GENERIC_IMAGE_CODE_BEGIN

        if (src_alpha == ZERO)
          {
            dest_color = ZERO;
          }
        else if (src_alpha == WP)
          {
            dest_color = src_color;
          }
        else
          {
            dest_color = src_alpha * src_color;
          }
        dest_alpha = src_alpha;

        dX(dest,1);
        dX(src,1);  

        GENERIC_IMAGE_CODE_END
      }
  }
}
