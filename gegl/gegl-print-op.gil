%h{
#include "gegl-point-op.h"
%}
%{
#include "gegl-print-op.h"
#include "gegl-print-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-private.h"
#include "gegl-image-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}

class Gegl:Print:Op from Gegl:Point:Op {

  private gint unused;

  public 
  GeglPrintOp *
  new (void)
  {
    GeglPrintOp * self = GEGL_PRINT_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }

  protected 
  gboolean 
  constructor(self)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;

    /* Chain up */
    if (!gegl_point_op_constructor (GEGL_POINT_OP(self),NULL,0))
      return FALSE;

    return TRUE;
  }

  override(Gegl:Op)
  void
  prepare(GeglOp *op,
          GeglImage *dest,
	  GeglRect *dest_rect)
  {
    /* Save has alphas so we can get quickly in scanline function */
    gegl_op_save_alphas(op);

    {
      GeglPointOp *point_op = GEGL_POINT_OP (op);
      GeglPointOpClass *point_op_class = 
	GEGL_POINT_OP_CLASS(GTK_OBJECT(point_op)->klass);
      point_op_class->scanline_func = gegl_print_op_COLORSPACE_DATATYPE;
    }
  } 

  private
  void
  COLORSPACE_DATATYPE (GeglPointOp *point_op,
                       GeglImageIterator *dest_iter, 
		       GeglImageIterator **src_iters)
  {
    GeglOp *op = GEGL_OP(point_op);
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha,has_alpha);
    GENERIC_IMAGE_DECL_END

    dest_has_alpha = op->_priv->has_alpha; 

    gegl_image_iterator_get_scanline_data (dest_iter,
                (guchar**)dest_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT
    
    while (width--)
      {
 	printf("(");
	GENERIC_IMAGE_CODE_BEGIN
	PRINT (dest); 
	dX(dest,1);
        GENERIC_IMAGE_CODE_END
 	printf(")");

      }
      printf("\n");
  }
}
