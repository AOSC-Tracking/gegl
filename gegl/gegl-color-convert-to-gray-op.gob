%h{
#include "gegl-color-convert-op.h"
%}
%{
#include "gegl-color-convert-to-gray-op.h"
#include "gegl-color-convert-to-gray-op-private.h"
#include "gegl-color-convert-op-private.h"
#include "gegl-op-private.h"
#include "gegl-utils.h"
%}


class Gegl:Color:Convert:To:Gray:Op from Gegl:Color:Convert:Op {

  public 
  GeglColorConvertToGrayOp *
  new (GeglImage *src)
  {
    GeglColorConvertToGrayOp * self = 
       GEGL_COLOR_CONVERT_TO_GRAY_OP (GET_NEW);

    /*Call the constructor */
    if (!constructor(self, src))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    /* ref and sink it */
    gegl_object_ref(GEGL_OBJECT(self));
    gtk_object_sink(GTK_OBJECT(self));

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
              GeglImage *src) 
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
   
    /* Chain up */
    if (!gegl_color_convert_op_constructor1 (
                   GEGL_COLOR_CONVERT_OP (self), 
                   src, GEGL_COLOR_SPACE_GRAY))
      return FALSE;
    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }
}
