%h{
#include "gegl-single-src-op.h"
%}
%{
#include "gegl-print-op.h"
#include "gegl-print-op-private.h"
#include "gegl-single-src-op-private.h"
#include "gegl-node.h"
#include "gegl-image-private.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}

class Gegl:Print:Op from Gegl:Single:Src:Op {

  public 
  GeglPrintOp *
  new (GeglImage *src)
  {
    GeglPrintOp * self = GEGL_PRINT_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self,src))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    /* Ref and sink it */
    gegl_object_ref(GEGL_OBJECT(self));
    gtk_object_sink(GTK_OBJECT(self));

    return self;
  }

  protected 
  gboolean 
  constructor(self,
              GeglImage *src)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;

    /* Chain up */
    if (!gegl_single_src_op_constructor (GEGL_SINGLE_SRC_OP(self),src))
      return FALSE;

    return TRUE;
  }

  override(Gegl:Image)
  void
  prepare(GeglImage *self_image,
          GList * requests)
  {
    GeglPointOpClass *point_op_class = 
        GEGL_POINT_OP_CLASS(GTK_OBJECT(self_image)->klass);

    GeglImageRequest *src_request = 
      (GeglImageRequest*)g_list_nth_data(requests,1); 
    GeglColorModel * src_cm = 
      gegl_tile_get_color_model (src_request->tile);
    g_return_if_fail (src_cm);

    {
      GeglColorSpace colorspace = 
        gegl_color_model_color_space(src_cm);
      GeglChannelDataType data_type = 
        gegl_color_model_data_type (src_cm);

      switch (colorspace)
        {
          case GEGL_COLOR_SPACE_RGB:
            switch (data_type)
              {
              case GEGL_U8:
                point_op_class->scanline_func = 
                  gegl_print_op_scanline_rgb_u8;
                break;
              case GEGL_FLOAT:
                point_op_class->scanline_func = 
                  gegl_print_op_scanline_rgb_float;
                break;
              case GEGL_U16:
                point_op_class->scanline_func = 
                  gegl_print_op_scanline_rgb_u16;
                break;
              default:
                g_warning("gegl_print_op_prepare: Can't find data_type\n");    
                break;

              }
            break;
          case GEGL_COLOR_SPACE_GRAY:
            switch (data_type)
              {
              case GEGL_U8:
                point_op_class->scanline_func = 
                  gegl_print_op_scanline_gray_u8;
                break;
              case GEGL_FLOAT:
                point_op_class->scanline_func = 
                  gegl_print_op_scanline_gray_float;
                break;
              case GEGL_U16:
                point_op_class->scanline_func = 
                  gegl_print_op_scanline_gray_u16;
                break;
              default:
                g_warning("gegl_print_op_prepare: Can't find data_type\n");    
                break;
              }
            break;
          default:
            g_warning("gegl_print_op_prepare: Can't find colorspace\n");    
            break;
        }
    }
  } 

  private
  void
  scanline_rgb_u8 (GeglPointOp *self_point_op,
                   GeglTileIterator **iters, 
                   gint width)
  {
    GeglColorModel *src_cm = 
      gegl_tile_iterator_get_color_model(iters[1]);

    guint8 *src_data[4];
    gboolean src_has_alpha;
    guint8 *src_r, *src_g, *src_b, *src_alpha=NULL;

    src_has_alpha = gegl_color_model_has_alpha(src_cm); 

    gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

    src_r = src_data[0];
    src_g = src_data[1];
    src_b = src_data[2];
    if (src_has_alpha)
      src_alpha = src_data[3];

    
    while (width--)
      {
        printf("(");
        printf ("%d ", *src_r) ;
        printf ("%d ", *src_g) ;
        printf ("%d ", *src_b) ;
        if (src_has_alpha)
          printf ("%d ", *src_alpha) ;
        src_r++;
        src_g++;
        src_b++;
        if (src_has_alpha)
          src_alpha++;

        printf(")");

      }
      printf("\n");
  }

  private
  void
  scanline_rgb_float (GeglPointOp *self_point_op,
                      GeglTileIterator **iters, 
                      gint width)
  {
    GeglColorModel *src_cm = 
      gegl_tile_iterator_get_color_model(iters[1]);

    gfloat *src_data[4];
    gboolean src_has_alpha;
    gfloat *src_r, *src_g, *src_b, *src_alpha=NULL;

    src_has_alpha = gegl_color_model_has_alpha(src_cm); 

    gegl_tile_iterator_get_current (iters[1],
                                     (gpointer*)src_data);

    src_r = src_data[0];
    src_g = src_data[1];
    src_b = src_data[2];
    if (src_has_alpha)
      src_alpha = src_data[3];

    
    while (width--)
      {
        printf("(");
        printf ("%.3f ", *src_r) ;
        printf ("%.3f ", *src_g) ;
        printf ("%.3f ", *src_b) ;
        if (src_has_alpha)
          printf ("%.3f ", *src_alpha) ;
        src_r++;
        src_g++;
        src_b++;
        if (src_has_alpha)
          src_alpha++;

        printf(")");

      }
      printf("\n");
  }

  private
  void
  scanline_rgb_u16 (GeglPointOp *self_point_op,
                    GeglTileIterator **iters, 
                    gint width)
  {
    GeglColorModel *src_cm = 
      gegl_tile_iterator_get_color_model(iters[1]);

    guint16 *src_data[4];
    gboolean src_has_alpha;
    guint16 *src_r, *src_g, *src_b, *src_alpha=NULL;

    src_has_alpha = gegl_color_model_has_alpha(src_cm); 

    gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

    src_r = src_data[0];
    src_g = src_data[1];
    src_b = src_data[2];
    if (src_has_alpha)
      src_alpha = src_data[3];

    
    while (width--)
      {
 	printf("(");
	printf ("%d ", *src_r) ;
	printf ("%d ", *src_g) ;
	printf ("%d ", *src_b) ;
	if (src_has_alpha)
	  printf ("%d ", *src_alpha) ;
	src_r++;
	src_g++;
	src_b++;
	if (src_has_alpha)
	  src_alpha++;

 	printf(")");

      }
      printf("\n");
  }

  private
  void
  scanline_gray_u8 (GeglPointOp *self_point_op,
                   GeglTileIterator **iters, 
                   gint width)
    {
    GeglColorModel *src_cm = 
      gegl_tile_iterator_get_color_model(iters[1]);

    guint8 *src_data[2];
    gboolean src_has_alpha;
    guint8 *src_gray, *src_alpha=NULL;

    src_has_alpha = gegl_color_model_has_alpha(src_cm); 

    gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

    src_gray = src_data[0];
    if (src_has_alpha)
      src_alpha = src_data[1];

    
    while (width--)
      {
 	printf("(");
	printf ("%d ", *src_gray) ;
	if (src_has_alpha)
	  printf ("%d ", *src_alpha) ;
	src_gray++;
	if (src_has_alpha)
	  src_alpha++;

 	printf(")");

      }
      printf("\n");
  }

  private
  void
  scanline_gray_float (GeglPointOp *self_point_op,
                       GeglTileIterator **iters, 
                       gint width)
    {
    GeglColorModel *src_cm = 
      gegl_tile_iterator_get_color_model(iters[1]);

    gfloat *src_data[2];
    gboolean src_has_alpha;
    gfloat *src_gray, *src_alpha=NULL;

    src_has_alpha = gegl_color_model_has_alpha(src_cm); 

    gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

    src_gray = src_data[0];
    if (src_has_alpha)
      src_alpha = src_data[1];

    
    while (width--)
      {
 	printf("(");
	printf ("%.3f ", *src_gray) ;
	if (src_has_alpha)
	  printf ("%.3f ", *src_alpha) ;
	src_gray++;
	if (src_has_alpha)
	  src_alpha++;

 	printf(")");

      }
      printf("\n");
  }

  private
  void
  scanline_gray_u16 (GeglPointOp *self_point_op,
                     GeglTileIterator **iters, 
                     gint width)
    {
    GeglColorModel *src_cm = 
      gegl_tile_iterator_get_color_model(iters[1]);

    guint16 *src_data[2];
    gboolean src_has_alpha;
    guint16 *src_gray, *src_alpha=NULL;

    src_has_alpha = gegl_color_model_has_alpha(src_cm); 

    gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

    src_gray = src_data[0];
    if (src_has_alpha)
      src_alpha = src_data[1];

    
    while (width--)
      {
 	printf("(");
	printf ("%d ", *src_gray) ;
	if (src_has_alpha)
	  printf ("%d ", *src_alpha) ;
	src_gray++;
	if (src_has_alpha)
	  src_alpha++;

 	printf(")");

      }
      printf("\n");
  }
}
