%h{
#include "gegl-color-model-rgb.h"
%}
%{
#include "gegl-color-model-rgb-float.h"
#include "gegl-color-model-rgb-float-private.h"
#include "gegl-color-model-rgb-private.h"
#include "gegl-color-model-private.h"
#include "gegl-color.h"
%}

class Gegl:Color:Model:Rgb:Float from Gegl:Color:Model:Rgb {

  public
  GeglColorModelRgbFloat *       
  new(gboolean has_alpha)
  {
    GeglColorModelRgbFloat * self = GEGL_COLOR_MODEL_RGB_FLOAT(GET_NEW);
  
    /*Call the constructor */
    if (!constructor(self, has_alpha))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }
  
  protected
  gboolean 
  constructor(self, 
              gboolean has_alpha)
  {
    GeglColorModelPrivate *color_modelP = (GeglColorModelPrivate*)
      (GEGL_COLOR_MODEL (self)->_priv);

    if (GEGL_OBJECT(self)->constructed) 
        return FALSE;
    
    /* Chain up to superclass*/
    if (!gegl_color_model_rgb_constructor (
         GEGL_COLOR_MODEL_RGB(self), has_alpha))
        return FALSE;

    color_modelP->data_type = FLOAT;
    color_modelP->channel_data_type_name = NULL;
    color_modelP->bytes_per_channel = sizeof(float);
    color_modelP->bytes_per_pixel = 
                            color_modelP->bytes_per_channel * 
                            color_modelP->num_channels;
    return TRUE;
  }
  
  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  override (Gegl:Color:Model) 
  void 
  set_color (GeglColorModel *cm, 
             GeglColor *color, 
             GeglColorConstant constant)
  {
    GeglChannelValue * channel_values = 
                          gegl_color_get_channel_values(color); 
    gboolean has_alpha = gegl_color_model_has_alpha (cm); 
    GeglColorModelRgb * cm_rgb = GEGL_COLOR_MODEL_RGB(cm);
    
    gint r = gegl_color_model_rgb_get_red_index (cm_rgb);
    gint g = gegl_color_model_rgb_get_green_index (cm_rgb);
    gint b = gegl_color_model_rgb_get_blue_index (cm_rgb);
    gint a = gegl_color_model_alpha_channel (GEGL_COLOR_MODEL(cm_rgb));

    switch (constant) 
      { 
        case COLOR_WHITE:
          channel_values[r].f = 1.0;
          channel_values[g].f = 1.0;
          channel_values[b].f = 1.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_BLACK:
          channel_values[r].f = 0.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_RED:
          channel_values[r].f = 1.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_GREEN:
          channel_values[r].f = 0.0;
          channel_values[g].f = 1.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_BLUE:
          channel_values[r].f = 0.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 1.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_GRAY:
        case COLOR_HALF_WHITE:
          channel_values[r].f = 0.5;
          channel_values[g].f = 0.5;
          channel_values[b].f = 0.5;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_WHITE_TRANSPARENT:
          channel_values[r].f = 1.0;
          channel_values[g].f = 1.0;
          channel_values[b].f = 1.0;
          if (!has_alpha)
            channel_values[a].f = 0.0;
          break;
        case COLOR_TRANSPARENT:
        case COLOR_BLACK_TRANSPARENT:
          channel_values[r].f = 0.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 0.0;
          break;
      }
   }

  
  override (Gegl:Color:Model) 
  void
  convert_to_xyz (GeglColorModel *cm, 
                  gfloat **dest_data, 
                  guchar **src_data, 
                  gint width)
  {
    /* convert from float rgb to float xyz */

    /*  
      [ X ] [ 0.412453  0.357580  0.180423 ] [ R709 ] 
      [ Y ]=[ 0.212671  0.715160  0.072169 ]*[ G709 ] 
      [ Z ] [ 0.019334  0.119193  0.950227 ] [ B709 ]

    */
    gfloat m00 = 0.412453;
    gfloat m10 = 0.357580;
    gfloat m20 = 0.180423;
    gfloat m01 = 0.212671;
    gfloat m11 = 0.715160;
    gfloat m21 = 0.072169;
    gfloat m02 = 0.019334;
    gfloat m12 = 0.119193;
    gfloat m22 = 0.950227;

    gfloat *src_r, *src_g, *src_b; 
    gfloat *src_a = NULL;
    gfloat *dest_x, *dest_y, *dest_z; 
    gfloat *dest_a = NULL;

    gboolean has_alpha = gegl_color_model_has_alpha(cm);

    src_r = (gfloat*) src_data[0];
    src_g = (gfloat*) src_data[1];
    src_b = (gfloat*) src_data[2];       

    dest_x = dest_data[0];
    dest_y = dest_data[1];
    dest_z = dest_data[2];

    if (has_alpha)
      {
       dest_a = dest_data[3];
       src_a = (gfloat*) src_data[3];
      }

    while (width--)
      {
       *dest_x++ = m00 * *src_r + m10 * *src_g + m20 * *src_b;
       *dest_y++ = m01 * *src_r + m11 * *src_g + m21 * *src_b;
       *dest_z++ = m02 * *src_r++ + m12 * *src_g++ + m22 * *src_b++;
       
       if (has_alpha)
         *dest_a++ = *src_a++;
      }
  }

  override (Gegl:Color:Model) 
  void
  convert_from_xyz (GeglColorModel *cm, 
                    guchar **dest_data, 
                    gfloat **src_data, 
                    gint width)
  {
    /* convert from float xyz to float rgb */

    /*
      [ R709 ] [ 3.240479 -1.53715  -0.498535 ] [ X ] 
      [ G709 ]=[-0.969256  1.875991  0.041556 ]*[ Y ] 
      [ B709 ] [ 0.055648 -0.204043  1.057311 ] [ Z ] 
    */

    gfloat m00 = 3.240479;
    gfloat m10 = -1.53715;
    gfloat m20 = -0.498535;
    gfloat m01 = -0.969256;
    gfloat m11 = 1.875991;
    gfloat m21 = 0.041556; 
    gfloat m02 = 0.055648;
    gfloat m12 = -0.204043;
    gfloat m22 = 1.057311;

    gfloat *src_x, *src_y, *src_z; 
    gfloat *src_a = NULL;
    gfloat *dest_r, *dest_g, *dest_b; 
    gfloat *dest_a = NULL;
    
    gboolean has_alpha = gegl_color_model_has_alpha(cm);

    src_x = src_data[0];
    src_y = src_data[1];
    src_z = src_data[2];

    dest_r = (gfloat*) dest_data[0];
    dest_g = (gfloat*) dest_data[1];
    dest_b = (gfloat*) dest_data[2];

    if (has_alpha) 
      {
       dest_a = (gfloat*) dest_data[3];
       src_a = src_data[3];
      }

    while (width--)
      {
       *dest_r++ = m00 * *src_x + m10 * *src_y + m20 * *src_z;
       *dest_g++ = m01 * *src_x + m11 * *src_y + m21 * *src_z;
       *dest_b++ = m02 * *src_x++ + m12 * *src_y++ + m22 * *src_z++;
        if (has_alpha)
         *dest_a++ = *src_a++;
      }
  }

  override (Gegl:Color:Model)
  gboolean 
  implements_color_conversion (GeglColorModel *cm,
                               GeglColorSpace colorspace)
  {
    switch (colorspace)
      {
	case GRAY:
	  return TRUE;
	  break;
	default:
	  return FALSE;
	  break;
      }
  }

  override (Gegl:Color:Model)
  gboolean 
  implements_data_conversion (GeglColorModel *cm,
                              GeglChannelDataType data_type)
  {
    switch (data_type)
      {
	case U8:
	  return TRUE;
	  break;
	default:
	  return FALSE;
	  break;
      }
  }

  override (Gegl:Color:Model)
  void
  convert_to_u8 (GeglColorModel *cm, 
                 guint8 **dest_data, 
                 guchar **src_data, 
                 gint width)
  {
    /* convert from float rgb to u8 rgb */

    gfloat           *src_r, *src_g, *src_b;
    gfloat          *src_a = NULL;
    guint8           *dest_r, *dest_g, *dest_b; 
    guint8          *dest_a = NULL;
    gboolean            has_alpha = gegl_color_model_has_alpha(cm);
    
    src_r = (gfloat*) src_data[0];
    src_g = (gfloat*) src_data[1];
    src_b = (gfloat*) src_data[2];
    if (has_alpha)
      src_a = (gfloat*) src_data[3];
    
    dest_r = dest_data[0];
    dest_g = dest_data[1];
    dest_b = dest_data[2];
    if (has_alpha)
      dest_a = dest_data[3];

    while (width--)
      {
       *dest_r++ = CLAMP(ROUND(*src_r++ * 255),0,255);
       *dest_g++ = CLAMP(ROUND(*src_g++ * 255),0,255);
       *dest_b++ = CLAMP(ROUND(*src_b++ * 255),0,255);
       if (has_alpha)
         *dest_a++ = CLAMP(ROUND(*src_a++ * 255),0,255);
      } 
    
  }

  override (Gegl:Color:Model)
  void
  convert_to_gray (GeglColorModel *cm, 
                   guchar **dest_data, 
                   guchar **src_data, 
                   gint width)
  {
    /* convert from float rgb to float gray */

    gfloat          *src_r, *src_g, *src_b; 
    gfloat          *src_a = NULL;
    gfloat          *dest_g; 
    gfloat          *dest_a = NULL;
    gboolean        has_alpha = gegl_color_model_has_alpha(cm);

    src_r = (gfloat*) src_data[0];
    src_g = (gfloat*) src_data[1];
    src_b = (gfloat*) src_data[2];
    if (has_alpha)
      src_a = (gfloat*) src_data[3];

    dest_g = (gfloat*) dest_data[0];
    if (has_alpha)
      dest_a = (gfloat*) dest_data[1];

    while (width--)
      {
       *dest_g++ = *src_r++ * 0.3 + *src_g++ * 0.6 + *src_b++ * 0.1;
       if (has_alpha)
         *dest_a++ = *src_a++;
      } 
  }
}

