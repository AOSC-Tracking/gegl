%h{
#include "gegl-color-model-rgb.h"
%}
%{
#include "gegl-color-model-rgb-float.h"
#include "gegl-color-model-rgb-float-private.h"
#include "gegl-color-model-rgb-private.h"
#include "gegl-color-model-private.h"
#include "gegl-color.h"
%}

class Gegl:Color:Model:Rgb:Float from Gegl:Color:Model:Rgb {

  public
  GeglColorModelRgbFloat *	
  new(gboolean has_alpha, gboolean is_premult)
  {
    GeglColorModelRgbFloat * self = GEGL_COLOR_MODEL_RGB_FLOAT(GET_NEW);
  
    /*Call the constructor */
    if (!constructor(self, has_alpha, is_premult))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }
  
  protected
  gboolean 
  constructor(self, gboolean has_alpha, gboolean is_premult)
  {
    GeglColorModelPrivate *color_modelP = (GeglColorModelPrivate*)
      (GEGL_COLOR_MODEL (self)->_priv);

    if (GEGL_OBJECT(self)->constructed) 
        return FALSE;
    
    /* Chain up to superclass*/
    if (!gegl_color_model_rgb_constructor (
         GEGL_COLOR_MODEL_RGB(self), has_alpha, is_premult))
        return FALSE;

    color_modelP->data_type = FLOAT;
    color_modelP->channel_data_type_name = NULL;
    color_modelP->bytes_per_channel = sizeof(float);
    color_modelP->bytes_per_pixel = 
                            color_modelP->bytes_per_channel * 
                            color_modelP->num_channels;
    return TRUE;
  }
  
  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  override (Gegl:Color:Model) 
  void 
  set_color (GeglColorModel *cm, 
             GeglColor *color, 
             GeglColorConstant constant)
  {
    GeglChannelValue * channel_values = 
                          gegl_color_get_channel_values(color); 
    gboolean has_alpha = gegl_color_model_has_alpha (cm); 
    GeglColorModelRgb * cm_rgb = GEGL_COLOR_MODEL_RGB(cm);
    
    gint r = gegl_color_model_rgb_get_red_index (cm_rgb);
    gint g = gegl_color_model_rgb_get_green_index (cm_rgb);
    gint b = gegl_color_model_rgb_get_blue_index (cm_rgb);
    gint a = gegl_color_model_alpha_channel (GEGL_COLOR_MODEL(cm_rgb));

    switch (constant) 
      { 
        case COLOR_WHITE:
          channel_values[r].f = 1.0;
          channel_values[g].f = 1.0;
          channel_values[b].f = 1.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_BLACK:
          channel_values[r].f = 0.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_RED:
          channel_values[r].f = 1.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_GREEN:
          channel_values[r].f = 0.0;
          channel_values[g].f = 1.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_BLUE:
          channel_values[r].f = 0.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 1.0;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_GRAY:
        case COLOR_HALF_WHITE:
          channel_values[r].f = 0.5;
          channel_values[g].f = 0.5;
          channel_values[b].f = 0.5;
          if (has_alpha)
            channel_values[a].f = 1.0;
          break;
        case COLOR_WHITE_TRANSPARENT:
          channel_values[r].f = 1.0;
          channel_values[g].f = 1.0;
          channel_values[b].f = 1.0;
          if (!has_alpha)
            channel_values[a].f = 0.0;
          break;
        case COLOR_TRANSPARENT:
        case COLOR_BLACK_TRANSPARENT:
          channel_values[r].f = 0.0;
          channel_values[g].f = 0.0;
          channel_values[b].f = 0.0;
          if (has_alpha)
            channel_values[a].f = 0.0;
          break;
      }
   }

  
  override (Gegl:Color:Model) 
  void
  convert_to_xyz (GeglColorModel *cm, gfloat *dest_data, guchar **src_data, gint width)
  {
    /* the color datat in src_data is rgb_float */
    /*  
      [ X ] [ 0.412453  0.35758   0.180423 ] [ R709 ] 
      [ Y ]=[ 0.212671  0.71516   0.072169 ]*[ G709 ] 
      [ Z ] [ 0.019334  0.119193  0.950227 ] [ B709 ]

    */
    gfloat m00 = 0.412453;
    gfloat m10 = 0.35758;
    gfloat m20 = 0.180423;
    gfloat m01 = 0.212671;
    gfloat m11 = 0.71516;
    gfloat m21 = 0.072169;
    gfloat m02 = 0.019334;
    gfloat m12 = 0.119193;
    gfloat m22 = 0.950227;

    gfloat *r, *g, *b, *a;
    gint i=0;

    gboolean has_alpha = gegl_color_model_has_alpha(cm);

    r = (gfloat*) src_data[0];
    g = (gfloat*) src_data[1];
    b = (gfloat*) src_data[2];	
    if(has_alpha){
    a = (gfloat*) src_data[3];

    while(width--)
    {
      dest_data[i++] = m00 * *r + m10 * *g + m20 * *b;
      dest_data[i++] = m01 * *r + m11 * *g + m21 * *b;
      dest_data[i++] = m02 * *r++ + m12 * *g++ + m22 * *b++;
      dest_data[i++] = *a++;
    }
    } else {
    while(width--)
    {
      dest_data[i++] = m00 * *r + m10 * *g + m20 * *b;
      dest_data[i++] = m01 * *r + m11 * *g + m21 * *b;
      dest_data[i++] = m02 * *r++ + m12 * *g++ + m22 * *b++;
    }
  }
  }

  override (Gegl:Color:Model) 
  void
  convert_from_xyz (GeglColorModel *cm, guchar **dest_data, gfloat *src_data, gint width)
  {
    /* the color datat in src_data is xyz_float */
    /*

      [R709 ] [ 3.240479 -1.53715  -0.498535 ] [ X ] 
      [ G709 ]=[-0.969256  1.875991  0.041556 ]*[ Y ] 
      [ B709 ] [ 0.055648 -0.204043  1.057311 ] [ Z ] 
    */

    gfloat m00 = 3.240479;
    gfloat m10 = -1.53715;
    gfloat m20 = -0.498535;
    gfloat m01 = -0.969256;
    gfloat m11 = 1.875991;
    gfloat m21 = 0.041556; 
    gfloat m02 = 0.055648;
    gfloat m12 = -0.204043;
    gfloat m22 = 1.057311;

    gfloat *r, *g, *b, *a;
    gint i=0;
    
    gboolean has_alpha = gegl_color_model_has_alpha(cm);

    r = (gfloat*) dest_data[0];
    g = (gfloat*) dest_data[1];
    b = (gfloat*) dest_data[2];  
    if(has_alpha){
    a = (gfloat*) dest_data[3];

    while(width--)
    {
      *r++ = m00 * src_data[i*4] + m10 * src_data[i*4+1] + m20 * src_data[i*4+2];
      *g++ = m01 * src_data[i*4] + m11 * src_data[i*4+1] + m21 * src_data[i*4+2];
      *b++ = m02 * src_data[i*4] + m12 * src_data[i*4+1] + m22 * src_data[i*4+2];
      *a++ = src_data[i*4+3];
      i++; 	
    }
    } else {
    while(width--)
    {
      *r++ = m00 * src_data[i*3] + m10 * src_data[i*3+1] + m20 * src_data[i*3+2];
      *g++ = m01 * src_data[i*3] + m11 * src_data[i*3+1] + m21 * src_data[i*3+2];
      *b++ = m02 * src_data[i*3] + m12 * src_data[i*3+1] + m22 * src_data[i*3+2];
      i++;
    }
    }
  }
}

