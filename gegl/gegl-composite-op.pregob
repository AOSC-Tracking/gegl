
I_op_I ()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.I = SRC.I;
    case OVER:
      DEST.I = SRC.I;
    case IN:
      DEST.I = SRC.I;
    case OUT:
      DEST.I = 0;
    case ATOP:
      DEST.I = SRC.I;
    case XOR:
      DEST.I = 0;
    case PLUS:
      DEST.I = SRC.I + DEST.I;
  }
}


PREMULT_IA_op_PREMULT_IA()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.A = SRC.A;
      DEST.I = SRC.I;
    case OVER:
      DEST.A = SRC.A + DEST.A * (1-SRC.A);  
      DEST.I = SRC.I + DEST.I * (1-SRC.A);
    case IN:
      DEST.A = SRC.A * DEST.A;
      DEST.I = SRC.I * DEST.A;
    case OUT:
      DEST.A = SRC.A * (1-DEST.A);
      DEST.I = SRC.I * (1-DEST.A);
    case ATOP:
      DEST.A = SRC.A * DEST.A + DEST.A * (1-SRC.A);
      DEST.I = SRC.I * DEST.A + DEST.I * (1-SRC.A);
    case XOR:
      DEST.A = SRC.A * (1-DEST.A) + DEST.A * (1-SRC.A);
      DEST.I = SRC.I * (1-DEST.A) + DEST.I * (1-SRC.A);
    case PLUS:
      DEST.A = SRC.A + DEST.A; 
      DEST.I = SRC.I + DEST.I;
  }
}

PREMULT_IA_op_I()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.A = 1; 
      DEST.I = SRC.I;
    case OVER:
      DEST.A = 1;
      DEST.I = SRC.I;
    case IN:
      DEST.I = SRC.I * DEST.A;
    case OUT:
      DEST.A = (1-DEST.A);
      DEST.I = SRC.I * (1-DEST.A);
    case ATOP:
      DEST.I = SRC.I * DEST.A;
    case XOR:
      DEST.A = (1-DEST.A);
      DEST.I = SRC.I * (1-DEST.A) + DEST.I;
    case PLUS:
      DEST.A = 1 + DEST.A;
      DEST.I = SRC.I + DEST.I;
  }
}

I_op_PREMULT_IA()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.I = SRC.I;
    case OVER:
      DEST.I = SRC.I + DEST.I * (1-SRC.A);
    case IN:
      DEST.I = SRC.I;
    case OUT:
      DEST.I = 0;
    case ATOP:
      DEST.I = SRC.I + DEST.I * (1-SRC.A);
    case XOR:
      DEST.I = DEST.I * (1-SRC.A);
    case PLUS:
      DEST.I = SRC.I + DEST.I;
  }
}

IA_op_IA()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.A = SRC.A;
      DEST.I = SRC.I;
    case OVER:
      A = SRC.A;
      B =  DEST.A * (1-SRC.A);
      DEST.A = A + B;
      if (DEST.A)
      	DEST.I = (SRC.I * A + DEST.I * B) / DEST.A;
      else
	DEST.I = 0;	
    case IN:
      DEST.A = SRC.A * DEST.A;
      if (DEST.A)
	DEST.I = SRC.I;
      else
	DEST.I = 0;					 		   	
    case OUT:
      DEST.A = SRC.A * (1-DEST.A);
      if (DEST.A)
	DEST.I = SRC.I;
      else
	DEST.I = 0;
    case ATOP:
      A = SRC.A * DEST.A;
      B = DEST.A * (1-SRC.A); 
      DEST.A = A + B;
      if (DEST.A)
      	DEST.I = SRC.I * A + DEST.I * B;
      else
	DEST.I = 0;
    case XOR:
      A = SRC.A * (1-DEST.A);
      B = DEST.A * (1-SRC.A); 
      DEST.A = A + B;
      if(DEST.A)
      	DEST.I = (SRC.I * A + DEST.I * B) / DEST.A;
      else
	DEST.I = 0;
    case PLUS:
      A = SRC.A;
      B = DEST.A; 
      DEST.A = A + B;
      if (DEST.A)
      	DEST.I = (SRC.I * A + DEST.I * B) / DEST.A;
	else
	DEST.I = 0;
  }
}

PREMULT_IA_op_PREMULT_I()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.A = 1;
      DEST.I = SRC.I;
    case OVER:
      DEST.A = SRC.A;
      if (DEST.A)
        DEST.I = SRC.I;
      else
        DEST.I = 0;
    case IN:
      if (DEST.A)
        DEST.I = SRC.I;
      else
        DEST.I = 0;
    case OUT:
      DEST.A = (1-DEST.A);
      if (DEST.A)
        DEST.I = SRC.I;
      else
        DEST.I = 0;
    case ATOP:
      if (DEST.A)
        DEST.I = SRC.I;
      else
        DEST.I = 0;
    case XOR:
      DEST.A = 1-DEST.A;
      if(DEST.A)
        DEST.I = SRC.I * A;
      else
        DEST.I = 0;
    case PLUS:
      if (DEST.A)
        DEST.I = (SRC.I + DEST.I * B) / DEST.A;
        else
        DEST.I = 0;
  }
}

PREMULT_I_op_PREMULT_IA()
{
  IMAGE DEST, SRC;
  GeglCompositeMode comp_mode = self->_priv->comp_mode;

  switch (comp_mode)
  {
    case REPLACE:
      DEST.I = SRC.I;
    case OVER:
      A = SRC.A;
      B =  (1-SRC.A);
      DEST.I = SRC.I * A + DEST.I * B;
    case IN:
      DEST.I = SRC.I;
    case OUT:
      DEST.I = SRC.I;
    case ATOP:
      A = SRC.A;
      B = 1-SRC.A;
      DEST.I = (SRC.I * A + DEST.I * B);
    case XOR:
      DEST.I = DEST.I * (1-SRC.A);
    case PLUS:
      DEST.I = (SRC.I * SRC.A + DEST.I;
  }
}

