#include "gegl-premult.h"
#include "gegl-scanline-processor.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>

static void class_init (GeglPremultClass * klass);
static void init (GeglPremult * self, GeglPremultClass * klass);
static void prepare (GeglOp * self_op, GList * requests);
static void scanline (GeglOp * self_op, GeglTileIterator ** iters, gint width);

static gpointer parent_class = NULL;

GType
gegl_premult_get_type (void)
{
  static GType type = 0;

  if (!type)
    {
      static const GTypeInfo typeInfo =
      {
        sizeof (GeglPremultClass),
        (GBaseInitFunc) NULL,
        (GBaseFinalizeFunc) NULL,
        (GClassInitFunc) class_init,
        (GClassFinalizeFunc) NULL,
        NULL,
        sizeof (GeglPremult),
        0,
        (GInstanceInitFunc) init,
      };

      type = g_type_register_static (GEGL_TYPE_POINT_OP, 
                                     "GeglPremult", 
                                     &typeInfo, 
                                     0);
    }
    return type;
}

static void 
init (GeglPremult * self, 
      GeglPremultClass * klass)
{
  GeglNode * self_node = GEGL_NODE(self); 
  GList * inputs = g_list_append(NULL, NULL);
  self_node->num_inputs = 1;
  gegl_node_set_inputs(self_node, inputs);
  g_list_free(inputs);
  return;
}

static void 
class_init (GeglPremultClass * klass)
{
  GeglOpClass *op_class = GEGL_OP_CLASS(klass);

  parent_class = g_type_class_peek_parent(klass);

  op_class->prepare = prepare;

  return;
}

static void 
prepare (GeglOp * self_op, 
         GList * requests)
{
  GeglPointOp *self_point_op = GEGL_POINT_OP(self_op);
  GeglOpRequest *dest_request = (GeglOpRequest*)g_list_nth_data(requests,0); 

  GeglTile *dest = dest_request->tile;
  GeglColorModel * dest_cm = gegl_tile_get_color_model (dest);

  g_return_if_fail(dest_cm);

  /* Get correct scanline func for this color model */
  {
    gboolean dest_has_alpha = gegl_color_model_has_alpha(dest_cm);
    if(dest_has_alpha)
      self_point_op->scanline_processor->func = scanline;        
    else
      {
        self_point_op->scanline_processor->func = NULL;        
        g_warning("premult: prepare: dest has no alpha channel\n");
      } 
  }
}

/**
 * scanline:
 * @self_op: a #GeglOp.
 * @iters: #GeglTileIterators array. 
 * @width: width of scanline.
 *
 * Processes a scanline.
 *
 **/
static void 
scanline (GeglOp * self_op, 
          GeglTileIterator ** iters, 
          gint width)
{
  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color,alpha);
  Pixel src(color,alpha);
  GENERIC_IMAGE_DECL_END

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT 

  while (width--)
    {
      GENERIC_IMAGE_CODE_BEGIN

      if (src_alpha == ZERO)
        {
          dest_color = ZERO;
        }
      else if (src_alpha == WP)
        {
          dest_color = src_color;
        }
      else
        {
          dest_color = src_alpha * src_color;
        }

      dest_alpha = src_alpha;

      dX(dest,1);
      dX(src,1);  

      GENERIC_IMAGE_CODE_END
    }
}
