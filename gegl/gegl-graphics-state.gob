%h{
#include "gegl-object.h"
%}
%{
#include "gegl-color.h"
#include "gegl-object-private.h"
#include "gegl-graphics-state.h"
#include "gegl-graphics-state-private.h"
%}

class Gegl:Graphics:State from Gegl:Object {

  public GeglColor *bg_color;              /* background color  */
  public GeglColor *fg_color;	           /* foreground color  */
  public GeglCompositeMode composite_mode; /* composite mode    */
  private GeglColorModel *color_model;     /* Do graphics states have these?*/
  
  private void comments(self)
  {
#if 0
  public GeglBrush * brush;                /* brush or pen style*/
  public GeglFont  * font;                 /* text font         */
  public GeglTransform * transform;        /* affine transform  */
  public GeglShape * clip_shape;           /* current clip      */ 
#endif
  }

  public
  GeglGraphicsState *	
  new(GeglColorModel *cm)
  {
    GeglGraphicsState * self = GEGL_GRAPHICS_STATE(GET_NEW);

    /*Call the constructor */
    if (!constructor(self,cm))
	return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }

  protected 
  gboolean 
  constructor(self, GeglColorModel *cm)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
	
    /* Chain up */
    if (!gegl_object_constructor (GEGL_OBJECT(self)))
      return FALSE;

    self->bg_color = gegl_color_new(cm);
    self->fg_color = gegl_color_new(cm);
    self->composite_mode = COMPOSITE_REPLACE;

    /*probably comes from a drawable or something,
      shouldnt allocate */

    self->_priv->color_model = cm; 

    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    GeglGraphicsState * self = GEGL_GRAPHICS_STATE(object); 

    /* Dispose of channels values array*/
    gegl_object_destroy(GEGL_OBJECT(self->bg_color));
    gegl_object_destroy(GEGL_OBJECT(self->fg_color));

    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  public
  GeglColor * 
  get_fg_color(self)
  {
    return self->bg_color;
  }

  public
  GeglColor* 
  get_bg_color(self)
  {
    return self->fg_color;
  }

  public
  GeglColorModel* 
  get_color_model(self)
  {
    return self->_priv->color_model;
  }

  public
  void 
  set_composite_mode(self,GeglCompositeMode mode)
  {
    self->composite_mode = mode;
  }

  public
  GeglCompositeMode 
  get_composite_mode(self)
  {
    return self->composite_mode;
  }
}
