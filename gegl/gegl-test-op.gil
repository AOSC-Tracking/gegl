%h{
#include "gegl-single-src-op.h"
%}
%{
#include "gegl-test-op.h"
#include "gegl-test-op-private.h"
#include "gegl-single-src-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-private.h"
#include "gegl-image-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}

class Gegl:Test:Op from Gegl:Single:Src:Op {

  public 
  GeglTestOp *
  new (GeglImage *src)
  {
    GeglTestOp * self = GEGL_TEST_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, src))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    /* ref and sink it */
    gtk_object_ref(GTK_OBJECT(self));
    gtk_object_sink(GTK_OBJECT(self));

    return self;
  }

  protected 
  gboolean 
  constructor(self,
              GeglImage *src)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;

    /* Chain up */
    if (!gegl_single_src_op_constructor (GEGL_SINGLE_SRC_OP(self),src))
      return FALSE;

    return TRUE;
  }

  override(Gegl:Op)
  void
  prepare(GeglOp *self_op,
          GeglImage *dest,
          GeglRect *dest_rect)
  {
    GeglPointOpClass *self_point_op_class = 
      GEGL_POINT_OP_CLASS(GTK_OBJECT(self_op)->klass);

    /* Save these so we can get them quickly in scanline func
       below */
    gegl_op_save_alphas(self_op);

    /* Now make sure the correct scanline func is installed */
    self_point_op_class->scanline_func = 
      gegl_test_op_scanline_COLORSPACE_DATATYPE;        
  } 

  private
  void
  scanline_COLORSPACE_DATATYPE (GeglPointOp *self_point_op,
                                GeglImageIterator *dest_iter, 
                                GeglImageIterator **src_iters)
  {
    GeglOp *self_op = GEGL_OP(self_point_op);
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha,has_alpha);
    Pixel src(color,alpha,has_alpha);
    GENERIC_IMAGE_DECL_END

    dest_has_alpha = self_op->_priv->has_alpha; 
    src_has_alpha = self_op->_priv->input_has_alpha[0]; 

    gegl_image_iterator_get_scanline_data (dest_iter,
                (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data (src_iters[0],
                (guchar**)src_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT
    
    while (width--)
      {
        GENERIC_IMAGE_CODE_BEGIN
        dest = .5 * src; 
        dX(dest,1);
        dX(src,1);
        GENERIC_IMAGE_CODE_END
      }
  }
}
