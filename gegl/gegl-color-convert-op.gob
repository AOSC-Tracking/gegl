%h{
#include "gegl-point-op.h"
%}
%{
#include "gegl-color-convert-op.h"
#include "gegl-color-convert-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-buffer.h"
#include "gegl-image-iterator.h"
#include "gegl-color.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}


class Gegl:Color:Convert:Op from Gegl:Point:Op {

  private GeglColorModel *dest_cm; /* dest color model */
  private GeglColorModel *src_cm;  /* src color model */
  private guchar **dest_data;      /* generic data pointers to dest channels */
  private guchar **src_data;       /* generic data pointers to src channels */
  
  protected 
  gboolean 
  constructor(self, 
             GeglImageBuffer *dest,
             GeglImageBuffer *src, 
             GeglRect *dest_rect,
             GeglRect *src_rect) 
  {
    GeglImageBuffer *image_buffers[2];
    GeglRect rects[2]; 
 
    if(GEGL_OBJECT (self)->constructed) 
      return FALSE;
  
    /* Put rects and image buffers into suitable form for point op */ 
    image_buffers[0] = dest;
    image_buffers[1] = src;

    gegl_rect_copy (&rects[0], dest_rect); 
    gegl_rect_copy (&rects[1], src_rect); 
 
    /* Chain up */
    if (!gegl_point_op_constructor ( 
            GEGL_POINT_OP (self), image_buffers, rects, 2))
      return FALSE;

    {
      GeglColorModel * dest_cm = gegl_image_buffer_color_model (dest);
      GeglColorModel * src_cm = gegl_image_buffer_color_model (src);
      gint dest_num_chans = gegl_color_model_num_channels (dest_cm); 
      gint src_num_chans = gegl_color_model_num_channels (src_cm); 

      self->_priv->dest_cm = dest_cm;  
      self->_priv->src_cm  = src_cm;  
      self->_priv->dest_data = g_new (guchar*, dest_num_chans);  
      self->_priv->src_data  = g_new (guchar*, src_num_chans);  
    }
  
    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    GeglColorConvertOp *self = GEGL_COLOR_CONVERT_OP (object); 
       
    g_free (self->_priv->dest_data);  
    g_free (self->_priv->src_data);  

    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

}
