%h{
#include "gegl-dual-src-op.h"
%}
%{
#include "gegl-composite-op.h"
#include "gegl-composite-op-private.h"
#include "gegl-dual-src-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-private.h"
#include "gegl-image-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h> 
%}

class Gegl:Composite:Op from Gegl:Dual:Src:Op {

  private GeglCompositeMode        comp_mode;

  public 
  GeglCompositeOp *
  new (GeglImage *src1,
       GeglImage *src2,       
       GeglCompositeMode mode)
  {
    GeglCompositeOp * self = GEGL_COMPOSITE_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, src1, src2, mode))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    /* ref and sink it */
    gegl_object_ref(GEGL_OBJECT(self));
    gtk_object_sink(GTK_OBJECT(self));

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
             GeglImage *src1,
             GeglImage *src2,       
             GeglCompositeMode mode)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;

    /* Chain up */
    if (!gegl_dual_src_op_constructor ( 
           GEGL_DUAL_SRC_OP(self), src1, src2))
      return FALSE;

    self->_priv->comp_mode = mode;
    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  override(Gegl:Op)
  void
  prepare(GeglOp *self_op,
          GeglImage *dest,
          GeglRect *roi)
  {
    GeglPointOp *self_point_op = GEGL_POINT_OP (self_op);
    GeglPointOpClass *self_point_op_class = 
      GEGL_POINT_OP_CLASS(GTK_OBJECT(self_point_op)->klass);

    gegl_op_save_alphas (self_op);

      {
	gboolean  s1_has_alpha = self_op->input_has_alpha[0]; 
	gboolean  s2_has_alpha = self_op->input_has_alpha[1]; 
       
        /* dest = src2 op src1 */ 

	if ( s2_has_alpha && s1_has_alpha)
	  self_point_op_class->scanline_func = 
        gegl_composite_op_COLORSPACEa_op_COLORSPACEa_DATATYPE;
	else if ( s2_has_alpha && !s1_has_alpha )
	  self_point_op_class->scanline_func = 
        gegl_composite_op_COLORSPACEa_op_COLORSPACE_DATATYPE;
	else if ( !s2_has_alpha && s1_has_alpha )
	  self_point_op_class->scanline_func = 
        gegl_composite_op_COLORSPACE_op_COLORSPACEa_DATATYPE;
	else if ( !s2_has_alpha && !s1_has_alpha )
	  self_point_op_class->scanline_func = 
        gegl_composite_op_COLORSPACE_op_COLORSPACE_DATATYPE;
      }
  } 

  private 
  void
  COLORSPACEa_op_COLORSPACEa_DATATYPE (GeglPointOp *self_point_op,
                                       GeglImageIterator *dest_iter, 
                                       GeglImageIterator **src_iters)
  {
    GeglCompositeOp *self = GEGL_COMPOSITE_OP (self_point_op);
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha);
    Pixel src1(color,alpha);
    Pixel src2(color,alpha);
    Channel a, b, alpha;
    GENERIC_IMAGE_DECL_END

    gegl_image_iterator_get_scanline_data ( dest_iter, 
        (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data ( src_iters[0], 
        (guchar**)src1_data);
    gegl_image_iterator_get_scanline_data ( src_iters[1], 
        (guchar**)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT

    switch(self->_priv->comp_mode)
      {
      case COMPOSITE_REPLACE:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN

            alpha = src2_alpha;
            dest_alpha = src2_alpha;

	    if (alpha)
	      {
		dest_color = src2_color;
	      }
	    else
	      {
		dest_color = src1_color;
	      }

            dX(dest,1);
	    dX(src1,1);
            dX(src2,1); 

            GENERIC_IMAGE_CODE_END
          }
        break;
      case COMPOSITE_OVER:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN

            a = (WP - src2_alpha) * src1_alpha;
            b = src2_alpha;
            alpha = a + b;

            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = (a * src1_color + b * src2_color)/alpha;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END
          }
        break;
      case COMPOSITE_IN:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN

            alpha = src1_alpha * src2_alpha;

            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END
          }
        break;
      case COMPOSITE_OUT:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN

            alpha = (WP - src1_alpha) * src2_alpha;

            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END
          }
        break;
      case COMPOSITE_ATOP:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN

            a = WP - src2_alpha;
            b = src2_alpha;
            alpha = src1_alpha;

            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = a * src1_color + b * src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END
          }
        break;
      case COMPOSITE_XOR:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN

            a = (WP - src2_alpha) * src1_alpha;
            b = (WP - src1_alpha) * src2_alpha;
            alpha = a + b;

            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = (a * src1_color + b * src2_color) / alpha;
              }
            else 
              {
               dest_color = src1_color; 
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END
          }
        break;
      default:
        break;
      }
  }
 
  private 
  void
  COLORSPACEa_op_COLORSPACE_DATATYPE (GeglPointOp *self_point_op,
                                      GeglImageIterator *dest_iter, 
                                      GeglImageIterator **src_iters)
  {
    GeglCompositeOp *self = GEGL_COMPOSITE_OP (self_point_op);
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color); 
    Pixel src1(color);
    Pixel src2(color,alpha);
    Channel a, b;
    GENERIC_IMAGE_DECL_END

    gegl_image_iterator_get_scanline_data ( dest_iter, 
        (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data ( src_iters[0], 
        (guchar**)src1_data);
    gegl_image_iterator_get_scanline_data ( src_iters[1], 
        (guchar**)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT

    switch(self->_priv->comp_mode)
      {
      case COMPOSITE_REPLACE:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

	    dest_color = src2_color * src2_alpha;

            dX(dest,1);
	    dX(src1,1);
            dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
	  }
        break;
      case COMPOSITE_OVER:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            a = (WP - src2_alpha);
            b = src2_alpha;

            dest_color = (a * src1_color + b * src2_color);

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      case COMPOSITE_IN:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

	    dest_color = src2_color * src2_alpha;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      case COMPOSITE_OUT:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            dest_color = ZERO;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

            GENERIC_IMAGE_CODE_END 
          }
        break;
      case COMPOSITE_ATOP:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            a = WP - src2_alpha;
            b = src2_alpha;

            dest_color = (a * src1_color + b * src2_color);

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
       break;
      case COMPOSITE_XOR:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            a = (WP - src2_alpha);

            dest_color = a * src1_color;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      default:
        break;
      }
  }

  private 
  void
  COLORSPACE_op_COLORSPACEa_DATATYPE (GeglPointOp *self_point_op,
                                      GeglImageIterator *dest_iter, 
                                      GeglImageIterator **src_iters)
  {
    GeglCompositeOp *self = GEGL_COMPOSITE_OP (self_point_op);
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha);
    Pixel src1(color,alpha);
    Pixel src2(color);
    Channel alpha;
    GENERIC_IMAGE_DECL_END 

    gegl_image_iterator_get_scanline_data (
	dest_iter, (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data (
	src_iters[0], (guchar**)src1_data);
    gegl_image_iterator_get_scanline_data (
	src_iters[1], (guchar**)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT

    switch(self->_priv->comp_mode)
      {
      case COMPOSITE_REPLACE:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            dest_color = src2_color;
            dest_alpha = WP;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      case COMPOSITE_OVER:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            dest_color = src2_color;
            dest_alpha = WP;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      case COMPOSITE_IN:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            alpha = src1_alpha;
            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
       break;
      case COMPOSITE_OUT:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            alpha = WP - src1_alpha;
            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

       	    dX(dest,1);
            dX(src1,1);
            dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      case COMPOSITE_ATOP:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            alpha = src1_alpha;
            dest_alpha = alpha;

	    if (alpha)
              {
                dest_color = src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

            GENERIC_IMAGE_CODE_END 
          }
       break;
      case COMPOSITE_XOR:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            alpha = WP - src1_alpha;
            dest_alpha = alpha;

            if (alpha)
              {
                dest_color = src2_color;
              }
            else 
              {
                dest_color = src1_color;
              }

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
          }
        break;
      default:
        break;
      }
  }

  private 
  void
  COLORSPACE_op_COLORSPACE_DATATYPE (GeglPointOp *self_point_op,
				     GeglImageIterator *dest_iter, 
				     GeglImageIterator **src_iters)
  {
    GeglCompositeOp *self = GEGL_COMPOSITE_OP (self_point_op);
    guint width = gegl_image_iterator_scanline_width (dest_iter);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color);
    Pixel src1(color);
    Pixel src2(color);
    GENERIC_IMAGE_DECL_END

    gegl_image_iterator_get_scanline_data (
	dest_iter, (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data (
	src_iters[0], (guchar**)src1_data);
    gegl_image_iterator_get_scanline_data (
	src_iters[1], (guchar**)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT

    switch(self->_priv->comp_mode)
      {
      case COMPOSITE_REPLACE:
      case COMPOSITE_OVER:
      case COMPOSITE_IN:
      case COMPOSITE_ATOP:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

	    dest_color = src2_color;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

            GENERIC_IMAGE_CODE_END 
       	  }
        break;
      case COMPOSITE_OUT:
      case COMPOSITE_XOR:
        while (width--)
          {
            GENERIC_IMAGE_CODE_BEGIN 

            dest_color = ZERO;

	    dX(dest,1);
	    dX(src1,1); 
	    dX(src2,1);

            GENERIC_IMAGE_CODE_END 
          }
        break;
      default:
        break;
      }
  }
}
