#include "gegl-unpremult-impl.h"
#include "gegl-scanline-processor.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>

static void class_init (GeglUnpremultImplClass * klass);
static void init (GeglUnpremultImpl * self, GeglUnpremultImplClass * klass);
static void prepare (GeglOpImpl * self_op_impl, GList * requests);
static void scanline (GeglOpImpl * self_op_impl, GeglTileIterator ** iters, gint width);

static gpointer parent_class = NULL;

GType
gegl_unpremult_impl_get_type (void)
{
  static GType type = 0;

  if (!type)
    {
      static const GTypeInfo typeInfo =
      {
        sizeof (GeglUnpremultImplClass),
        (GBaseInitFunc) NULL,
        (GBaseFinalizeFunc) NULL,
        (GClassInitFunc) class_init,
        (GClassFinalizeFunc) NULL,
        NULL,
        sizeof (GeglUnpremultImpl),
        0,
        (GInstanceInitFunc) init,
      };

      type = g_type_register_static (GEGL_TYPE_POINT_OP_IMPL, 
                                     "GeglUnpremultImpl", 
                                     &typeInfo, 
                                     0);
    }
    return type;
}

static void 
init (GeglUnpremultImpl * self, 
      GeglUnpremultImplClass * klass)
{
  GeglOpImpl * self_op_impl = GEGL_OP_IMPL(self);
  self_op_impl->num_inputs = 1;
  return;
}

static void 
class_init (GeglUnpremultImplClass * klass)
{
  GeglOpImplClass *op_impl_class = GEGL_OP_IMPL_CLASS(klass);

  parent_class = g_type_class_peek_parent(klass);

  op_impl_class->prepare = prepare;

  return;
}

static void 
prepare (GeglOpImpl * self_op_impl, 
         GList * requests)
{
  GeglPointOpImpl *self_point_op_impl = GEGL_POINT_OP_IMPL(self_op_impl);
  GeglOpRequest *dest_request = (GeglOpRequest*)g_list_nth_data(requests,0); 

  GeglTile *dest = dest_request->tile;
  GeglColorModel * dest_cm = gegl_tile_get_color_model (dest);

  g_return_if_fail(dest_cm);

  /* Get correct scanline func for this color model */
  {
    gboolean dest_has_alpha = gegl_color_model_has_alpha(dest_cm);
    if(dest_has_alpha)
      self_point_op_impl->scanline_processor->func = scanline;        
    else
      {
        self_point_op_impl->scanline_processor->func = NULL;        
        g_warning("unpremult-impl: prepare: dest has no alpha channel\n");
      } 
  }
}

/**
 * scanline:
 * @self_op_impl: a #GeglOpImpl.
 * @iters: #GeglTileIterators array. 
 * @width: width of scanline.
 *
 * Processes a scanline.
 *
 **/
static void 
scanline (GeglOpImpl * self_op_impl, 
          GeglTileIterator ** iters, 
          gint width)
{
  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color,alpha);
  Pixel src(color,alpha);
  GENERIC_IMAGE_DECL_END

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT 

  while (width--)
    {
      GENERIC_IMAGE_CODE_BEGIN

      if(src_alpha == WP)
        {
          dest_color =  src_color;
        }
      else if (src_alpha == ZERO)
        {
          dest_color = ZERO;
        }
      else
        {
          dest_color =  src_color / src_alpha;
        }

        dest_alpha = src_alpha;
            
        dX(dest,1);
        dX(src,1); 

      GENERIC_IMAGE_CODE_END
    }
}
