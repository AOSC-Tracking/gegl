#include "gegl-comp-premult.h"
#include "gegl-scanline-processor.h"
#include "gegl-color-model.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-utils.h"
#include "gegl-value-types.h"

enum
{
  PROP_0, 
  PROP_INPUT0,
  PROP_INPUT1,
  PROP_LAST 
};

static void class_init (GeglCompPremultClass * klass);
static void init (GeglCompPremult * self, GeglCompPremultClass * klass);
static void get_property (GObject *gobject, guint prop_id, GValue *value, GParamSpec *pspec);
static void set_property (GObject *gobject, guint prop_id, const GValue *value, GParamSpec *pspec);

static void prepare (GeglOp * op, GList * output_values, GList *input_values);

static void scanline_ca_op_ca (GeglOp * op, GeglTileIterator ** iters, gint width);
static void scanline_ca_op_c (GeglOp * op, GeglTileIterator ** iters, gint width);
static void scanline_c_op_ca (GeglOp * op, GeglTileIterator ** iters, gint width);
static void scanline_c_op_c (GeglOp * op, GeglTileIterator ** iters, gint width);

static gpointer parent_class = NULL;

GType
gegl_comp_premult_get_type (void)
{
  static GType type = 0;

  if (!type)
    {
      static const GTypeInfo typeInfo =
      {
        sizeof (GeglCompPremultClass),
        (GBaseInitFunc) NULL,
        (GBaseFinalizeFunc) NULL,
        (GClassInitFunc) class_init,
        (GClassFinalizeFunc) NULL,
        NULL,
        sizeof (GeglCompPremult),
        0,
        (GInstanceInitFunc) init,
      };

      type = g_type_register_static (GEGL_TYPE_POINT_OP, 
                                     "GeglCompPremult", 
                                     &typeInfo, 
                                     0);
    }
    return type;
}

static void 
class_init (GeglCompPremultClass * klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS(klass);
  GeglOpClass *op_class = GEGL_OP_CLASS(klass);

  parent_class = g_type_class_peek_parent(klass);

  op_class->prepare = prepare;

  gobject_class->set_property = set_property;
  gobject_class->get_property = get_property;

  g_object_class_install_property (gobject_class, PROP_INPUT0,
                                   g_param_spec_object ("input0",
                                                        "Input0",
                                                        "Input 0 of GeglCompPremult",
                                                         GEGL_TYPE_OBJECT,
                                                         G_PARAM_CONSTRUCT |
                                                         G_PARAM_READWRITE));
   
  g_object_class_install_property (gobject_class, PROP_INPUT1,
                                   g_param_spec_object ("input1",
                                                        "Input1",
                                                        "Input 1 of GeglCompPremult",
                                                         GEGL_TYPE_OBJECT,
                                                         G_PARAM_CONSTRUCT |
                                                         G_PARAM_READWRITE));
  return;
}

static void 
init (GeglCompPremult * self, 
      GeglCompPremultClass * klass)
{
  GeglNode * node = GEGL_NODE(self); 

  self->comp_mode = GEGL_COMPOSITE_OVER;

  gegl_node_set_num_outputs(node, 1);
  gegl_node_set_num_inputs(node, 2);
  return;
}

static void
get_property (GObject      *gobject,
              guint         prop_id,
              GValue       *value,
              GParamSpec   *pspec)
{
  GeglNode *node = GEGL_NODE (gobject);

  switch (prop_id)
  {
    case PROP_INPUT0:
      g_value_set_object(value, (GObject*)gegl_node_get_nth_input(node, 0));  
      break;
    case PROP_INPUT1:
      g_value_set_object(value, (GObject*)gegl_node_get_nth_input(node, 1));  
      break;
    default:
      break;
  }
}

static void
set_property (GObject      *gobject,
              guint         prop_id,
              const GValue *value,
              GParamSpec   *pspec)
{
  GeglNode *node = GEGL_NODE (gobject);

  switch (prop_id)
  {
    case PROP_INPUT0:
      gegl_node_set_nth_input(node, (GeglNode*)g_value_get_object(value), 0);  
      break;
    case PROP_INPUT1:
      gegl_node_set_nth_input(node, (GeglNode*)g_value_get_object(value), 1);  
      break;
    default:
      break;
  }
}


static void 
prepare (GeglOp * op, 
         GList * output_values,
         GList * input_values)
{
  GeglPointOp *point_op = GEGL_POINT_OP(op);

  GValue *dest_value = g_list_nth_data(output_values, 0); 
  GeglTile *dest = g_value_get_image_data_tile(dest_value);
  GeglColorModel * dest_cm = gegl_tile_get_color_model (dest);

  GValue *src1_value = g_list_nth_data(input_values, 0); 
  GeglTile *src1 = g_value_get_image_data_tile(src1_value);
  GeglColorModel * src1_cm = gegl_tile_get_color_model (src1);

  GValue *src2_value = g_list_nth_data(input_values, 1); 
  GeglTile *src2 = g_value_get_image_data_tile(src2_value);
  GeglColorModel * src2_cm = gegl_tile_get_color_model (src2);

  g_return_if_fail (dest_cm);
  g_return_if_fail (src1_cm);
  g_return_if_fail (src2_cm);

  {
    gboolean  s1_has_alpha = gegl_color_model_has_alpha(src1_cm);
    gboolean  s2_has_alpha = gegl_color_model_has_alpha(src2_cm); 

    /* dest = src2 op src1 */ 

    if ( s2_has_alpha && s1_has_alpha)
      point_op->scanline_processor->func = scanline_ca_op_ca;
    else if ( s2_has_alpha && !s1_has_alpha )
      point_op->scanline_processor->func = scanline_ca_op_c;
    else if ( !s2_has_alpha && s1_has_alpha )
      point_op->scanline_processor->func = scanline_c_op_ca;
    else if ( !s2_has_alpha && !s1_has_alpha )
      point_op->scanline_processor->func = scanline_c_op_c;
  }
}


/**
 * scanline_ca_op_ca:
 * @op: #a GeglOp. 
 * @iters: array of TileIterators. 
 * @width: width of scanline. 
 *
 * Process an color_alpha op color_alpha scanline. 
 *
 **/
static void 
scanline_ca_op_ca (GeglOp * op, 
                   GeglTileIterator ** iters, 
                   gint width)
{
  GeglCompPremult *self = GEGL_COMP_PREMULT(op);
  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color,alpha);
  Pixel src1(color,alpha);
  Pixel src2(color,alpha);
  Channel a, b;
  GENERIC_IMAGE_DECL_END

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
  gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT

  switch(self->comp_mode)
    {
    case GEGL_COMPOSITE_REPLACE:
      while (width--) 
        {
          GENERIC_IMAGE_CODE_BEGIN

          dest = src2;

          dX(dest,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OVER:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          a = WP - src2_alpha;
          dest = a * src1 + src2;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        } 
      break;
    case GEGL_COMPOSITE_IN:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          b = src1_alpha;
          dest = b * src2;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OUT:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          b = WP - src1_alpha;
          dest = b * src2;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_ATOP:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          a = WP - src2_alpha; 
          b = src1_alpha; 
          dest_color = a * src1_color + b * src2_color;
          dest_alpha = b;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_XOR:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          a = WP - src2_alpha;
          b = WP - src1_alpha; 
          dest = a * src1 + b * src2;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    default:
      break;
    }  
}

/**
 * scanline_ca_op_c:
 * @op: #a GeglOp. 
 * @iters: array of TileIterators. 
 * @width: width of scanline. 
 *
 * Process color_alpha op color scanline. 
 *
 **/
static void 
scanline_ca_op_c (GeglOp * op, 
                  GeglTileIterator ** iters, 
                  gint width)
{
  GeglCompPremult *self = GEGL_COMP_PREMULT(op);
  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color); 
  Pixel src1(color);
  Pixel src2(color,alpha);
  Channel a;
  GENERIC_IMAGE_DECL_END

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
  gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT
    
  switch(self->comp_mode)
    {
    case GEGL_COMPOSITE_REPLACE:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          dest_color = src2_color;

          dX(dest,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OVER:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          a = WP - src2_alpha;
          dest_color = a * src1_color + src2_color;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_IN:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          dest_color = src2_color;

          dX(dest,1);
          dX(src2,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OUT:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          dest = ZERO;

          dX(dest,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_ATOP:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          a = WP - src2_alpha; 
          dest_color = a * src1_color + src2_color;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_XOR:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          a = WP - src2_alpha; 
          dest_color = a * src1_color;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    default:
      break;
    } 
}

/**
 * scanline_c_op_ca:
 * @op: #a GeglOp. 
 * @iters: array of TileIterators. 
 * @width: width of scanline. 
 *
 * Process color op color_alpha scanline. 
 *
 **/
static void 
scanline_c_op_ca (GeglOp * op, 
                  GeglTileIterator ** iters, 
                  gint width)
{
  GeglCompPremult *self = GEGL_COMP_PREMULT(op);
  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color,alpha);
  Pixel src1(color,alpha);
  Pixel src2(color);
  Channel b;
  GENERIC_IMAGE_DECL_END 

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
  gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT

  switch(self->comp_mode)
    {
    case GEGL_COMPOSITE_REPLACE:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          dest_color = src2_color;
          dest_alpha = WP;

          dX(dest,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OVER:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          dest_color = src2_color;
          dest_alpha = WP;

          dX(dest,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_IN:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          b = src1_alpha;
          dest_color = b * src2_color;
          dest_alpha = b;  

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OUT:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          b = WP - src1_alpha;
          dest_color = b * src2_color;
          dest_alpha = b;  

          dX(dest,1);
          dX(src1,1); 
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_ATOP:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          b = src1_alpha; 
          dest_color = b * src2_color;
          dest_alpha = b;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_XOR:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN

          b = WP - src1_alpha;
          dest_color = b * src2_color;
          dest_alpha = b;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    default:
      break;
    } 

}

/**
 * scanline_c_op_c:
 * @op: #a GeglOp. 
 * @iters: array of TileIterators. 
 * @width: width of scanline. 
 *
 * Process color op color scanline. 
 *
 **/
static void 
scanline_c_op_c (GeglOp * op, 
                 GeglTileIterator ** iters, 
                 gint width)
{
  GeglCompPremult *self = GEGL_COMP_PREMULT(op);
  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color);
  Pixel src1(color);
  Pixel src2(color);
  GENERIC_IMAGE_DECL_END

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
  gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT
    
  switch(self->comp_mode)
    {
    case GEGL_COMPOSITE_REPLACE:
    case GEGL_COMPOSITE_OVER:
    case GEGL_COMPOSITE_IN:
    case GEGL_COMPOSITE_ATOP:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN
          dest_color = src2_color;

          dX(dest,1);
          dX(src1,1);
          dX(src2,1); 

          GENERIC_IMAGE_CODE_END     
        }
      break;
    case GEGL_COMPOSITE_OUT:
    case GEGL_COMPOSITE_XOR:
      while (width--)
        {
          GENERIC_IMAGE_CODE_BEGIN
          dest_color = ZERO; 

          dX(dest,1);

          GENERIC_IMAGE_CODE_END     
        }
      break;
    default:
      break;
    }

}
