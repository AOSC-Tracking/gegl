#include "gegl-diff.h"
#include "gegl-scanline-processor.h"
#include "gegl-color-model.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-utils.h"
#include "gegl-value-types.h"

enum
{
  PROP_0, 
  PROP_INPUT0,
  PROP_INPUT1,
  PROP_LAST 
};

static void class_init (GeglDiffClass * klass);
static void init (GeglDiff * self, GeglDiffClass * klass);
static void get_property (GObject *gobject, guint prop_id, GValue *value, GParamSpec *pspec);
static void set_property (GObject *gobject, guint prop_id, const GValue *value, GParamSpec *pspec);

static void prepare (GeglOp * op, GList * output_values, GList *input_values);
static void scanline (GeglOp * op, GeglTileIterator ** iters, gint width);

static gpointer parent_class = NULL;

GType
gegl_diff_get_type (void)
{
  static GType type = 0;

  if (!type)
    {
      static const GTypeInfo typeInfo =
      {
        sizeof (GeglDiffClass),
        (GBaseInitFunc) NULL,
        (GBaseFinalizeFunc) NULL,
        (GClassInitFunc) class_init,
        (GClassFinalizeFunc) NULL,
        NULL,
        sizeof (GeglDiff),
        0,
        (GInstanceInitFunc) init,
      };

      type = g_type_register_static (GEGL_TYPE_POINT_OP, 
                                     "GeglDiff", 
                                     &typeInfo, 
                                     0);
    }
    return type;
}

static void 
class_init (GeglDiffClass * klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS(klass);
  GeglOpClass *op_class = GEGL_OP_CLASS(klass);

  parent_class = g_type_class_peek_parent(klass);

  op_class->prepare = prepare;

  gobject_class->set_property = set_property;
  gobject_class->get_property = get_property;

  g_object_class_install_property (gobject_class, PROP_INPUT0,
                                   g_param_spec_object ("input0",
                                                        "Input0",
                                                        "Input 0 of GeglDiff",
                                                         GEGL_TYPE_OP,
                                                         G_PARAM_CONSTRUCT |
                                                         G_PARAM_READWRITE));
   
  g_object_class_install_property (gobject_class, PROP_INPUT1,
                                   g_param_spec_object ("input1",
                                                        "Input1",
                                                        "Input 1 of GeglDiff",
                                                         GEGL_TYPE_OP,
                                                         G_PARAM_CONSTRUCT |
                                                         G_PARAM_READWRITE));
  return;
}

static void 
init (GeglDiff * self, 
      GeglDiffClass * klass)
{
  GeglNode * node = GEGL_NODE(self); 
  gegl_node_set_num_outputs(node, 1);
  gegl_node_set_num_inputs(node, 2);
}

static void
get_property (GObject      *gobject,
              guint         prop_id,
              GValue       *value,
              GParamSpec   *pspec)
{
  GeglNode *node = GEGL_NODE (gobject);

  switch (prop_id)
  {
    case PROP_INPUT0:
      g_value_set_object(value, (GObject*)gegl_node_get_nth_input(node, 0));  
      break;
    case PROP_INPUT1:
      g_value_set_object(value, (GObject*)gegl_node_get_nth_input(node, 1));  
      break;
    default:
      break;
  }
}

static void
set_property (GObject      *gobject,
              guint         prop_id,
              const GValue *value,
              GParamSpec   *pspec)
{
  GeglNode *node = GEGL_NODE (gobject);

  switch (prop_id)
  {
    case PROP_INPUT0:
      gegl_node_set_nth_input(node, (GeglNode*)g_value_get_object(value), 0);  
      break;
    case PROP_INPUT1:
      gegl_node_set_nth_input(node, (GeglNode*)g_value_get_object(value), 1);  
      break;
    default:
      break;
  }
}


static void 
prepare (GeglOp * op, 
         GList * output_values,
         GList * input_values)
{
  GeglPointOp *point_op = GEGL_POINT_OP(op); 

  GValue *dest_value = g_list_nth_data(output_values, 0); 
  GeglTile *dest = g_value_get_image_data_tile(dest_value);
  GeglColorModel * dest_cm = gegl_tile_get_color_model (dest);

  g_return_if_fail(dest_cm);

  /* Get correct scanline func for this color model */
  point_op->scanline_processor->func = scanline;        
}


/**
 * scanline:
 * @op: a #GeglOp
 * @iters: #GeglTileIterators array. 
 * @width: width of scanline.
 *
 * Processes a scanline.
 *
 **/
static void 
scanline (GeglOp * op, 
          GeglTileIterator ** iters, 
          gint width)
{
  GeglColorModel *dest_cm = gegl_tile_iterator_get_color_model(iters[0]);
  GeglColorModel *src1_cm = gegl_tile_iterator_get_color_model(iters[1]);
  GeglColorModel *src2_cm = gegl_tile_iterator_get_color_model(iters[2]);

  GENERIC_IMAGE_DECL_BEGIN
  Pixel dest(color,alpha,has_alpha);
  Pixel src1(color,alpha,has_alpha);
  Pixel src2(color,alpha,has_alpha);
  GENERIC_IMAGE_DECL_END 

  dest_has_alpha = gegl_color_model_has_alpha(dest_cm); 
  src1_has_alpha = gegl_color_model_has_alpha(src1_cm); 
  src2_has_alpha = gegl_color_model_has_alpha(src2_cm); 

  gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
  gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
  gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

  GENERIC_IMAGE_IMAGE_DATA_INIT
    
  while (width--)
    {
      GENERIC_IMAGE_CODE_BEGIN  

      dest_color = ABS(src1_color - src2_color);

      if (dest_has_alpha)
        {
          if (src1_has_alpha && src2_has_alpha)
            {
              dest_alpha = MIN(src1_alpha, src2_alpha);
            }
          else if (src1_has_alpha)
            {
              dest_alpha = src1_alpha;
            }
          else if (src2_has_alpha)
            {
              dest_alpha = src2_alpha;
            }
        }

      dX(dest,1);
      dX(src1,1);
      dX(src2,1);

      GENERIC_IMAGE_CODE_END
    }               
}
