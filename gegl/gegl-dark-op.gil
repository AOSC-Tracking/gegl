%h{
#include "gegl-dual-src-op.h"
%}
%{
#include "gegl-dark-op.h"
#include "gegl-dark-op-private.h"
#include "gegl-dual-src-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-private.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-color.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}


class Gegl:Dark:Op from Gegl:Dual:Src:Op {

  public 
  GeglDarkOp *
  new (GeglImage *src1,
       GeglImage *src2)       
  {
    GeglDarkOp * self = GEGL_DARK_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, src1, src2))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    /* ref and sink it */
    gegl_object_ref(GEGL_OBJECT(self));
    gtk_object_sink(GTK_OBJECT(self));

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
              GeglImage *src1,
              GeglImage *src2)
  {
    
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
    
    /* Chain up */
    if (!gegl_dual_src_op_constructor (
	  GEGL_DUAL_SRC_OP(self),src1, src2))
      return FALSE;

    return TRUE;
  }

  override(Gegl:Image)
  void
  prepare(GeglImage *self_image,
          GList * requests)
  {
    GeglPointOpClass *self_point_op_class = 
      GEGL_POINT_OP_CLASS(GTK_OBJECT(self_image)->klass);

    GeglImageRequest *dest_request = 
      (GeglImageRequest*)g_list_nth_data(requests,0); 
    GeglTile *dest = dest_request->tile;
    GeglColorModel * dest_cm = gegl_tile_get_color_model (dest);
    g_return_if_fail (dest_cm);

    /* Now make sure the correct scanline func is installed */
    self_point_op_class->scanline_func = 
      scanline_COLORSPACE_DATATYPE;        
  } 

  private 
  void
  scanline_COLORSPACE_DATATYPE (GeglPointOp *self_point_op,
                                GeglTileIterator **iters,
                                gint width)
  {
    GeglColorModel *dest_cm = gegl_tile_iterator_get_color_model(iters[0]);
    GeglColorModel *src1_cm = gegl_tile_iterator_get_color_model(iters[1]);
    GeglColorModel *src2_cm = gegl_tile_iterator_get_color_model(iters[2]);

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha,has_alpha);
    Pixel src1(color,alpha,has_alpha);
    Pixel src2(color,alpha,has_alpha);
    GENERIC_IMAGE_DECL_END

    dest_has_alpha = gegl_color_model_has_alpha(dest_cm); 
    src1_has_alpha = gegl_color_model_has_alpha(src1_cm); 
    src2_has_alpha = gegl_color_model_has_alpha(src2_cm); 

    gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
    gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
    gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT
      
    while (width--)
      {
        GENERIC_IMAGE_CODE_BEGIN  

        dest_color = MIN(src1_color, src2_color);

        if (dest_has_alpha)
          {
            if (src1_has_alpha && src2_has_alpha)
              {
                dest_alpha = MIN(src1_alpha, src2_alpha);
              }
            else if (src1_has_alpha)
              {
                dest_alpha = src1_alpha;
              }
            else if (src2_has_alpha)
              {
                dest_alpha = src2_alpha;
              }
          }

        dX(dest,1);
        dX(src1,1);
        dX(src2,1);

        GENERIC_IMAGE_CODE_END
      }               
  }
}
