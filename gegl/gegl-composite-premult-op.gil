%h{
#include "gegl-dual-src-op.h"
%}
%{
#include "gegl-composite-premult-op.h"
#include "gegl-composite-premult-op-private.h"
#include "gegl-dual-src-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-private.h"
#include "gegl-tile.h"
#include "gegl-tile-iterator.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h> 
%}

class Gegl:Composite:Premult:Op from Gegl:Dual:Src:Op {

  private GeglCompositeMode        comp_mode;

  public 
  GeglCompositePremultOp *
  new (GeglImage *src1,
       GeglImage *src2,       
       GeglCompositeMode mode)
  {
    GeglCompositePremultOp * self = GEGL_COMPOSITE_PREMULT_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, src1, src2, mode))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
              GeglImage *src1,
              GeglImage *src2,       
              GeglCompositeMode mode)
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;

    /* Chain up */
    if (!gegl_dual_src_op_constructor ( 
           GEGL_DUAL_SRC_OP(self), src1, src2))
      return FALSE;

    self->_priv->comp_mode = mode;
    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  override(Gegl:Image)
  void
  prepare(GeglImage *self_image,
          GList * requests)
  {
    GeglPointOpClass *self_point_op_class = 
      GEGL_POINT_OP_CLASS(GTK_OBJECT(self_image)->klass);

    GeglImageRequest *dest_request = 
      (GeglImageRequest*)g_list_nth_data(requests,0); 
    GeglTile *dest = dest_request->tile;
    GeglColorModel * dest_cm = gegl_tile_get_color_model (dest);

    GeglImageRequest *s1_request = 
      (GeglImageRequest*)g_list_nth_data(requests,1); 
    GeglTile *s1 = s1_request->tile;
    GeglColorModel * s1_cm = gegl_tile_get_color_model (s1);

    GeglImageRequest *s2_request = 
      (GeglImageRequest*)g_list_nth_data(requests,2); 
    GeglTile *s2 = s2_request->tile;
    GeglColorModel * s2_cm = gegl_tile_get_color_model (s2);

    g_return_if_fail (dest_cm);
    g_return_if_fail (s1_cm);
    g_return_if_fail (s2_cm);

      {
        gboolean  s1_has_alpha = gegl_color_model_has_alpha(s1_cm);
        gboolean  s2_has_alpha = gegl_color_model_has_alpha(s2_cm); 

        /* dest = src2 op src1 */ 

        if ( s2_has_alpha && s1_has_alpha)
          self_point_op_class->scanline_func = 
            scanline_COLORSPACEa_op_COLORSPACEa_DATATYPE;
        else if ( s2_has_alpha && !s1_has_alpha )
          self_point_op_class->scanline_func = 
            scanline_COLORSPACEa_op_COLORSPACE_DATATYPE;
        else if ( !s2_has_alpha && s1_has_alpha )
          self_point_op_class->scanline_func = 
            scanline_COLORSPACE_op_COLORSPACEa_DATATYPE;
        else if ( !s2_has_alpha && !s1_has_alpha )
          self_point_op_class->scanline_func = 
            scanline_COLORSPACE_op_COLORSPACE_DATATYPE;
     }
  } 

  private 
  void
  scanline_COLORSPACEa_op_COLORSPACEa_DATATYPE (GeglPointOp *self_point_op,
                                                GeglTileIterator **iters,
                                                gint width)
  {
    GeglCompositePremultOp *self = GEGL_COMPOSITE_PREMULT_OP(self_point_op);
    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha);
    Pixel src1(color,alpha);
    Pixel src2(color,alpha);
    Channel a, b;
    GENERIC_IMAGE_DECL_END

    gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
    gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
    gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT

    switch(self->_priv->comp_mode)
      {
      case GEGL_COMPOSITE_REPLACE:
        while (width--) 
          {
            GENERIC_IMAGE_CODE_BEGIN

	    dest = src2;

	    dX(dest,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_OVER:
	while (width--)
	  {
	    GENERIC_IMAGE_CODE_BEGIN

	    a = WP - src2_alpha;
	    dest = a * src1 + src2;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
	  } 
	break;
      case GEGL_COMPOSITE_IN:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    b = src1_alpha;
	    dest = b * src2;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

	    GENERIC_IMAGE_CODE_END     
	  }
        break;
      case GEGL_COMPOSITE_OUT:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    b = WP - src1_alpha;
	    dest = b * src2;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_ATOP:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    a = WP - src2_alpha; 
	    b = src1_alpha; 
	    dest_color = a * src1_color + b * src2_color;
	    dest_alpha = b;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_XOR:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    a = WP - src2_alpha;
	    b = WP - src1_alpha; 
	    dest = a * src1 + b * src2;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      default:
        break;
      }  
  }
 
  private 
  void
  scanline_COLORSPACEa_op_COLORSPACE_DATATYPE (GeglPointOp *self_point_op,
                                               GeglTileIterator **iters,
                                               gint width)
  {
    GeglCompositePremultOp *self = GEGL_COMPOSITE_PREMULT_OP(self_point_op);
    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color); 
    Pixel src1(color);
    Pixel src2(color,alpha);
    Channel a;
    GENERIC_IMAGE_DECL_END

    gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
    gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
    gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT
      
    switch(self->_priv->comp_mode)
      {
      case GEGL_COMPOSITE_REPLACE:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            dest_color = src2_color;

	    dX(dest,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_OVER:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    a = WP - src2_alpha;
	    dest_color = a * src1_color + src2_color;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_IN:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    dest_color = src2_color;

	    dX(dest,1);
	    dX(src2,1);

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_OUT:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

	    dest = ZERO;

	    dX(dest,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_ATOP:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            a = WP - src2_alpha; 
            dest_color = a * src1_color + src2_color;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_XOR:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            a = WP - src2_alpha; 
            dest_color = a * src1_color;

            dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      default:
        break;
      } 
  }

  private 
  void
  scanline_COLORSPACE_op_COLORSPACEa_DATATYPE (GeglPointOp *self_point_op,
                                               GeglTileIterator **iters,
                                               gint width)
  {
    GeglCompositePremultOp *self = GEGL_COMPOSITE_PREMULT_OP(self_point_op);
    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha);
    Pixel src1(color,alpha);
    Pixel src2(color);
    Channel b;
    GENERIC_IMAGE_DECL_END 

    gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
    gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
    gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT

    switch(self->_priv->comp_mode)
      {
      case GEGL_COMPOSITE_REPLACE:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            dest_color = src2_color;
            dest_alpha = WP;

	    dX(dest,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_OVER:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            dest_color = src2_color;
            dest_alpha = WP;

	    dX(dest,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_IN:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            b = src1_alpha;
            dest_color = b * src2_color;
            dest_alpha = b;  

            dX(dest,1);
            dX(src1,1);
            dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_OUT:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            b = WP - src1_alpha;
            dest_color = b * src2_color;
            dest_alpha = b;  

	    dX(dest,1);
	    dX(src1,1); 
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_ATOP:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            b = src1_alpha; 
            dest_color = b * src2_color;
            dest_alpha = b;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_XOR:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN

            b = WP - src1_alpha;
            dest_color = b * src2_color;
            dest_alpha = b;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1);

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      default:
        break;
      } 
  }

  private 
  void
  scanline_COLORSPACE_op_COLORSPACE_DATATYPE (GeglPointOp *self_point_op,
                                              GeglTileIterator **iters,
                                              gint width)
  {
    GeglCompositePremultOp *self = GEGL_COMPOSITE_PREMULT_OP(self_point_op);
    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color);
    Pixel src1(color);
    Pixel src2(color);
    GENERIC_IMAGE_DECL_END

    gegl_tile_iterator_get_current (iters[0], (gpointer*)dest_data);
    gegl_tile_iterator_get_current (iters[1], (gpointer*)src1_data);
    gegl_tile_iterator_get_current (iters[2], (gpointer*)src2_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT
      
    switch(self->_priv->comp_mode)
      {
      case GEGL_COMPOSITE_REPLACE:
      case GEGL_COMPOSITE_OVER:
      case GEGL_COMPOSITE_IN:
      case GEGL_COMPOSITE_ATOP:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN
	    dest_color = src2_color;

	    dX(dest,1);
	    dX(src1,1);
	    dX(src2,1); 

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      case GEGL_COMPOSITE_OUT:
      case GEGL_COMPOSITE_XOR:
        while (width--)
          {
	    GENERIC_IMAGE_CODE_BEGIN
            dest_color = ZERO; 

	    dX(dest,1);

	    GENERIC_IMAGE_CODE_END     
          }
        break;
      default:
        break;
      }
  }
}
