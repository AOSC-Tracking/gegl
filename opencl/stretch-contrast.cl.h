/* This file is an image processing operation for GEGL
 *
 * GEGL is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * GEGL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GEGL; if not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 Carlos Zubieta <czubieta.dev@gmail.com>
 */

static const char* stretch_contrast_cl_source =
"__kernel void two_stages_local_min_max_reduce (__global const float4 *in,     \n"
"                                               __global       float  *out_min,\n"
"                                               __global       float  *out_max,\n"
"                                               __local        float  *aux_min,\n"
"                                               __local        float  *aux_max,\n"
"                                                              int    n_pixels)\n"
"{                                                                             \n"
"  int    gid   = get_global_id(0);                                            \n"
"  int    gsize = get_global_size(0);                                          \n"
"  int    lid   = get_local_id(0);                                             \n"
"  int    lsize = get_local_size(0);                                           \n"
"  float4 min_v = (float4)(FLT_MAX);                                           \n"
"  float4 max_v = (float4)(FLT_MIN);                                           \n"
"  float4 in_v;                                                                \n"
"  float  aux0, aux1;                                                          \n"
"  int    it;                                                                  \n"
"  /* Loop sequentially over chunks of input vector */                         \n"
"  while (gid < n_pixels)                                                      \n"
"    {                                                                         \n"
"      in_v  =  in[gid];                                                       \n"
"      min_v =  fmin(min_v,in_v);                                              \n"
"      max_v =  fmax(max_v,in_v);                                              \n"
"      gid   += gsize;                                                         \n"
"    }                                                                         \n"
"                                                                              \n"
"  /* Perform parallel reduction */                                            \n"
"  aux_min[lid] = min(min(min_v.x,min_v.y),min_v.z);                           \n"
"  aux_max[lid] = max(max(max_v.x,max_v.y),max_v.z);                           \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                               \n"
"  for(it = lsize / 2; it > 0; it >>= 1)                                       \n"
"    {                                                                         \n"
"      if (lid < it)                                                           \n"
"        {                                                                     \n"
"          aux0         = aux_min[lid + it];                                   \n"
"          aux1         = aux_min[lid];                                        \n"
"          aux_min[lid] = fmin(aux0, aux1);                                    \n"
"                                                                              \n"
"          aux0         = aux_max[lid + it];                                   \n"
"          aux1         = aux_max[lid];                                        \n"
"          aux_max[lid] = fmax(aux0, aux1);                                    \n"
"        }                                                                     \n"
"      barrier(CLK_LOCAL_MEM_FENCE);                                           \n"
"  }                                                                           \n"
"  if (lid == 0)                                                               \n"
"    {                                                                         \n"
"      out_min[get_group_id(0)] = aux_min[0];                                  \n"
"      out_max[get_group_id(0)] = aux_max[0];                                  \n"
"    }                                                                         \n"
"}                                                                             \n"
"                                                                              \n"
"__kernel void init_to_float_max (__global float *in)                          \n"
"{                                                                             \n"
"  int gid = get_global_id(0);                                                 \n"
"  in[gid] = FLT_MAX;                                                          \n"
"}                                                                             \n"
"                                                                              \n"
"__kernel void init_to_float_min (__global float *in)                          \n"
"{                                                                             \n"
"  int gid = get_global_id(0);                                                 \n"
"  in[gid] = FLT_MIN;                                                          \n"
"}                                                                             \n"
"                                                                              \n"
"__kernel void global_min_max_reduce (__global float *in_min,                  \n"
"                                     __global float *in_max,                  \n"
"                                     __global float *out_min,                 \n"
"                                     __global float *out_max)                 \n"
"{                                                                             \n"
"  int   gid   = get_global_id(0);                                             \n"
"  int   lid   = get_local_id(0);                                              \n"
"  int   lsize = get_local_size(0);                                            \n"
"  float aux0, aux1;                                                           \n"
"  int   it;                                                                   \n"
"                                                                              \n"
"  /* Perform parallel reduction */                                            \n"
"  for(it = lsize / 2; it > 0; it >>= 1)                                       \n"
"    {                                                                         \n"
"      if (lid < it)                                                           \n"
"        {                                                                     \n"
"          aux0        = in_min[gid + it];                                     \n"
"          aux1        = in_min[gid];                                          \n"
"          in_min[gid] = fmin(aux0, aux1);                                     \n"
"                                                                              \n"
"          aux0        = in_max[gid + it];                                     \n"
"          aux1        = in_max[gid];                                          \n"
"          in_max[gid] = fmax(aux0, aux1);                                     \n"
"        }                                                                     \n"
"      barrier(CLK_LOCAL_MEM_FENCE);                                           \n"
"  }                                                                           \n"
"  if (lid == 0)                                                               \n"
"    {                                                                         \n"
"      out_min[get_group_id(0)] = in_min[gid];                                 \n"
"      out_max[get_group_id(0)] = in_max[gid];                                 \n"
"    }                                                                         \n"
"}                                                                             \n"
"                                                                              \n"
"__kernel void cl_stretch_contrast (__global const float4 *in,                 \n"
"                                   __global       float4 *out,                \n"
"                                                  float   min,                \n"
"                                                  float   diff)               \n"
"{                                                                             \n"
"  int    gid  = get_global_id(0);                                             \n"
"  float4 in_v = in[gid];                                                      \n"
"                                                                              \n"
"  in_v.xyz = (in_v.xyz - min) / diff;                                         \n"
"  out[gid] = in_v;                                                            \n"
"}                                                                             \n"
;
