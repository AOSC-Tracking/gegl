<!-- ##### SECTION Title ##### -->
GeglFilter

<!-- ##### SECTION Short_Description ##### -->
The primitive image processing object.

<!-- ##### SECTION Long_Description ##### -->
<para>
Filters are the primitive image processing objects in Gegl. Every Filter has
methods to validate and process its data inputs and produce data outputs. These
methods are called by the #GeglEvalMgr visitors during evaluation.
</para>

<para>
The most important of these is gegl_filter_evaluate(). It calls back to the
particular subclass of Filter to do the actual image processing in three
stages, prepare(), process(), and finish(). These are all virtual methods of
Filter that are overridden by subclasses. 
</para>

<variablelist>
  <varlistentry>
      <term>prepare()</term>
        <listitem>
         <para>
         Setup for the operation is done here. Point ops set up their
         particular scanline function pointer here. Other buffers or resources can be
         set up here as well.
         </para>
        </listitem>
  </varlistentry>
  <varlistentry>
      <term>process()</term>
        <listitem>
          <para>
          The operation is actually carried out here. For point ops this is
          where the scanline function is called repeatedly until all scanlines are
          processed.
          </para>
        </listitem>
  </varlistentry>
  <varlistentry>
      <term>finish()</term>
        <listitem>
         <para>
         Clean up for the operation is done here. 
         </para>
        </listitem>
  </varlistentry>
</variablelist>

<para>
In addition to evaluation methods, Filter has validation methods for both input
and output data. These are gegl_filter_validate_inputs() and
gegl_filter_validate_outputs(). These will be called by the #GeglEvalMgr just
before gegl_filter_evaluate(). Subclasses should override the virtual
validate_inputs() and validate_outputs() and do validation for the data inputs
or outputs they added during the Op's initialization. In addition this is where
inputs are converted if necessary for use in this Op. For example an image data
input may need conversion from RGB to GRAY to match the color model of the op.
</para>

<para>
The methods in Filter should only ever be called from the #GeglEvalMgr
visitors during graph traversal. None of them should be called otherwise.  
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GeglFilter ##### -->
<para>

</para>


<!-- ##### FUNCTION gegl_filter_evaluate ##### -->
<para>

</para>

@self: 
<!-- # Unused Parameters # -->
@data_outputs: 
@data_inputs: 


<!-- ##### FUNCTION gegl_filter_validate_inputs ##### -->
<para>

</para>

@self: 
@collected_input_data_list: 
<!-- # Unused Parameters # -->
@collected_data_outputs: 
@data_inputs: 


<!-- ##### FUNCTION gegl_filter_validate_outputs ##### -->
<para>

</para>

@self: 
<!-- # Unused Parameters # -->
@data_outputs: 


