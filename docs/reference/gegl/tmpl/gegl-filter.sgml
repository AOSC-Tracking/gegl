<!-- ##### SECTION Title ##### -->
GeglFilter

<!-- ##### SECTION Short_Description ##### -->
The primitive image processing object.

<!-- ##### SECTION Long_Description ##### -->
<para>
Filters are the primitive image processing objects in Gegl. Every Filter has
methods to process the input data and turn it into output data.  
Filters also have methods to to validate the input and output data before
the actual processing is done.  All the methods for processing 
and validating data above are called by the #GeglEvalMgr during
various passes it makes over the graph.
</para>

<para>
The most important of these methods is gegl_filter_evaluate(). This 
method calls back to the particular subclass of Filter to do the actual 
image processing in three stages, prepare(), process(), and finish(). These are 
all virtual methods of Filter that should be overridden by subclasses. 
</para>

<variablelist>
  <varlistentry>
      <term>prepare()</term>
        <listitem>
         <para>
         Setup for the operation is done here. Point ops set up their
         particular scanline function pointer here. Other buffers or 
         resources can be set up here as well.
         </para>
        </listitem>
  </varlistentry>
  <varlistentry>
      <term>process()</term>
        <listitem>
          <para>
          The operation is actually carried out here. For point ops this is
          where the scanline function is called repeatedly until all scanlines are
          processed.
          </para>
        </listitem>
  </varlistentry>
  <varlistentry>
      <term>finish()</term>
        <listitem>
         <para>
         Clean up for the operation is done here. Any buffers or resources 
         can be disposed of here. 
         </para>
        </listitem>
  </varlistentry>
</variablelist>

<para>
In addition to evaluation methods, Filters has validation methods for both input
and output data. These are called gegl_filter_validate_inputs() and
gegl_filter_validate_outputs(). These will be called by the #GeglEvalMgr just
before gegl_filter_evaluate(). Subclasses should override the virtual
validate_inputs() and validate_outputs() and do validation for the Op's 
input data or output data.  This is where inputs can be converted 
if necessary for use in this Op. For example an input image data may need 
to be converted from RGB to GRAY to match the color model of the Op.
</para>

<para>
All the methods described above in Filter should only ever be called from 
the #GeglEvalMgr and its visitors during graph traversal. None of them should 
be called directly. This is all handled automatically during graph evaluation. 
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GeglFilter ##### -->
<para>

</para>


<!-- ##### STRUCT GeglFilterClass ##### -->
<para>

</para>

@node_class: 
@evaluate: 

<!-- ##### FUNCTION gegl_filter_create_property ##### -->
<para>

</para>

@self: 
@param_spec: 


<!-- ##### FUNCTION gegl_filter_evaluate ##### -->
<para>

</para>

@self: 
@output_prop: 
@Returns: 
<!-- # Unused Parameters # -->
@data_outputs: 
@data_inputs: 


