<!-- ##### SECTION Title ##### -->
GeglNode

<!-- ##### SECTION Short_Description ##### -->
Abstract node class.

<!-- ##### SECTION Long_Description ##### -->
<para>
This is the abstract node class for Gegl. Nodes have both inputs and outputs.
Usually the number of these is fixed for the duration of the Node's existence.
</para>
<para>
Heres a Node with two inputs and one output:
</para>
<graphic fileref="../images/node_2inputs_1output.png"></graphic>

<para>
Each input of a Node has at most one source attached to it upstream.  There may
be no source upstream for a particular input if the graph is still being
constructed or the input is NULL.
</para>
<para>
Below is a Node with two inputs. The first input has a source attached to it.
</para>
<graphic fileref="../images/node_no_input_upstream.png"></graphic>

<para>
In contrast, each output of a Node can have multiple sinks attached to it
downstream. This is because more than one Node may be pulling data downstream
from the output of the Node.
</para>
<para>
Heres an example of two sinks downstream from the output of a Node: 
</para>
<graphic fileref="../images/sharednode.png"></graphic>

<para>
A Node is a root node if there are no sinks attached to its output.
</para>

<para>
Heres a simple example of an graph for Over(Blur(A), Max(A,B)):
</para>
<graphic fileref="../images/simplegraph.png"></graphic>
<para>
Here Over (composite over) is the root node, and A and B are Color op nodes
(constant colors).  Blur has A as source and Over as sink. Max has A and B as
sources and Over as sink. A is shared by both sinks Blur and Max. Finally Over
is downstream from Blur, A and B are upstream from everything, etc. 
</para>

<para>
The Node class also manages adding or changing sources as well sinks.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GeglVisitor ##### -->
<para>

</para>


<!-- ##### STRUCT GeglConnector ##### -->
<para>

</para>

@node: 
@input: 
@source: 

<!-- ##### FUNCTION gegl_node_get_num_inputs ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_num_outputs ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_source ##### -->
<para>

</para>

@self: 
@n: 
@Returns: 
<!-- # Unused Parameters # -->
@output: 


<!-- ##### FUNCTION gegl_node_set_source ##### -->
<para>

</para>

@self: 
@source: 
@n: 
<!-- # Unused Parameters # -->
@output: 


<!-- ##### FUNCTION gegl_node_get_num_sinks ##### -->
<para>

</para>

@self: 
@Returns: 
<!-- # Unused Parameters # -->
@output: 


<!-- ##### FUNCTION gegl_node_get_sink ##### -->
<para>

</para>

@self: 
@n: 
@Returns: 
<!-- # Unused Parameters # -->
@output: 


<!-- ##### FUNCTION gegl_node_get_sink_input ##### -->
<para>

</para>

@self: 
@n: 
@Returns: 
<!-- # Unused Parameters # -->
@output: 


<!-- ##### FUNCTION gegl_node_unlink ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_remove_sources ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_remove_sinks ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_set_num_inputs ##### -->
<para>

</para>

@self: 
@num_inputs: 


<!-- ##### FUNCTION gegl_node_set_num_outputs ##### -->
<para>

</para>

@self: 
@num_outputs: 


<!-- ##### FUNCTION gegl_node_add_input ##### -->
<para>

</para>

@self: 
@n: 


<!-- ##### FUNCTION gegl_node_add_output ##### -->
<para>

</para>

@self: 
@n: 


<!-- ##### FUNCTION gegl_node_free_inputs ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_free_outputs ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_accept ##### -->
<para>

</para>

@self: 
@visitor: 


<!-- ##### ARG GeglNode:input ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:num-inputs ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:num-outputs ##### -->
<para>

</para>

