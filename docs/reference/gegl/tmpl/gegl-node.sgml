<!-- ##### SECTION Title ##### -->
GeglNode

<!-- ##### SECTION Short_Description ##### -->
Abstract node class.

<!-- ##### SECTION Long_Description ##### -->

<para>
This is the abstract node class for Gegl. Nodes have inputs and outputs.
Usually the number of these is fixed for the duration of the Node's existence.
<xref linkend="node-2inputs-1output"/> shows a Node with two inputs and one 
output.
<figure id="node-2inputs-1output">
<title>Node with two inputs and one output</title>
<graphic fileref="node_2inputs_1output.png"></graphic>
</figure>
</para>

<para>
Each input of a Node has at most one source attached to it upstream.  There may
be no source upstream for a particular input if the graph is still being
constructed or the input is NULL.
<xref linkend="node-no-input-upstream"/> shows a Node with two inputs. 
The first input has a source attached to it, the second input has no source
attached to it.
<figure id="node-no-input-upstream">
<title>Node with two inputs and a source</title>
<graphic fileref="node_no_input_upstream.png"></graphic>
</figure>
</para>

<para>
In contrast, each output of a Node can have multiple sinks attached to it
downstream. This is because more than one Node may be pulling data downstream
from the output of the Node. 
<xref linkend="sharednode"/> shows an example of two sinks 
downstream from the output of a Node. 
<figure id="sharednode">
<title>A node with two sinks</title>
<graphic fileref="sharednode.png"></graphic>
</figure>
</para>

<para>
Graphs typically have root Nodes and leaf Nodes.  A Node is a root Node if
there are no sinks attached to its output. A Node is a leaf Node if has no
inputs. <xref linkend="simplegraph"/> shows a simple example of an graph 
for Over(Blur(A), Max(A,B)).
<figure id="simplegraph">
<title>A simple graph</title>
<graphic fileref="simplegraph.png"></graphic>
</figure>
Here Over (composite over) is the root Node, and A and B are Color Nodes
(constant colors).  Blur has A as source and Over as sink. Max has A and B as
sources and Over as sink. A is shared by both sinks Blur and Max. Finally Over
is downstream from Blur, A and B are upstream from everything, etc. 
</para>

<para>
The Node class also manages adding or changing sources as well as sinks.
</para>

<para>
<xref linkend="sources"/> shows source code for setting up two 
sources as inputs to a Node during construction.
<example id="sources"> 
<title> An example of inputs for a Node.</title>
<programlisting>
/* 
   Set up to add two constant color images.
  (.6,.8,1.0) = (.1,.2,.3) + (.5,.6,.7) 
*/
GeglOp * color0 = g_object_new (GEGL_TYPE_COLOR,
                                "pixel-rgb-float", .1, .2, .3,
                                NULL);

GeglOp * color1 = g_object_new (GEGL_TYPE_COLOR,
                                "pixel-rgb-float", .5, .6, .7,
                                NULL);

GeglOp * iadd = g_object_new (GEGL_TYPE_I_ADD,
                              "source-0", color0,
                              "source-1", color1, 
                              NULL); 
</programlisting>
</example>
The #GeglIAdd node iadd has color0 as the first input source (source-0)
and color1 as the second input source (source-1). IAdd is
an op that just adds the components of the inputs it is passed.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GeglNode ##### -->
<para>

</para>


<!-- ##### STRUCT GeglNodeClass ##### -->
<para>

</para>

@object_class: 
@accept: 

<!-- ##### FUNCTION gegl_node_get_num_inputs ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_num_outputs ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_source ##### -->
<para>

</para>

@self: 
@n: 
@Returns: 


<!-- ##### FUNCTION gegl_node_set_source ##### -->
<para>

</para>

@self: 
@source: 
@n: 


<!-- ##### FUNCTION gegl_node_get_num_sinks ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_sink ##### -->
<para>

</para>

@self: 
@n: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_sink_input ##### -->
<para>

</para>

@self: 
@n: 
@Returns: 


<!-- ##### FUNCTION gegl_node_unlink ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_remove_sources ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_remove_sinks ##### -->
<para>

</para>

@self: 


<!-- ##### FUNCTION gegl_node_set_num_inputs ##### -->
<para>

</para>

@self: 
@num_inputs: 


<!-- ##### FUNCTION gegl_node_set_num_outputs ##### -->
<para>

</para>

@self: 
@num_outputs: 


<!-- ##### FUNCTION gegl_node_add_input ##### -->
<para>

</para>

@self: 
<!-- # Unused Parameters # -->
@n: 


<!-- ##### FUNCTION gegl_node_add_output ##### -->
<para>

</para>

@self: 
<!-- # Unused Parameters # -->
@n: 


<!-- ##### FUNCTION gegl_node_accept ##### -->
<para>

</para>

@self: 
@visitor: 


<!-- ##### ARG GeglNode:num-inputs ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:num-outputs ##### -->
<para>

</para>

