<!-- ##### SECTION Title ##### -->
GeglNode

<!-- ##### SECTION Short_Description ##### -->
Abstract node class.

<!-- ##### SECTION Long_Description ##### -->
<para>
This is the abstract node class for Gegl. Nodes can have both inputs and
outputs. Usually the number of these is fixed for the duration of the Node's
existence.
</para>
<para>
Heres a node with one input and two outputs:
</para>
<graphic fileref="../images/node_input_outputs.png"></graphic>

<para>
Each input of a Node has at most one Node attached to the other end of it
upstream. There may be no Node upstream that is attached to a particular input
for a Node. This can happen for example if the graph is still being constructed. 
</para>
<para>
Below is a node with two inputs. Just the first input has a Node upstream of it.
</para>
<graphic fileref="../images/node_no_input_upstream.png"></graphic>

<para>
In contrast, each output of a Node can have multiple Nodes attached to it
downstream. This is because more than one Node may be pulling data downstream
from the same output of a Node.
</para>
<para>
Heres an example of two nodes upstream from the same output: 
</para>
<graphic fileref="../images/sharednode.png"></graphic>

<para>
A Node is called a leaf node if it has no inputs. A Node is called a root node
if there are no Nodes attached to the outputs of it.
</para>

<para>
Heres a simple example of an graph for Comp(Blur(A), Mult(A,B)):
</para>
<graphic fileref="../images/simplegraph.png"></graphic>
<para>
Here Comp (composite over) is the root node, A and B are leaf SampledImage
nodes. Blur has A as input and Comp as output and Mult has two inputs, A and B,
with Comp as output. A is shared by both its outputs Blur and Mult. Finally
Comp is downstream from Blur, A and B are upstream from everything, etc. 
</para>

<para>
The Node class also manages adding or changing inputs as well outputs.
</para>

<para>
The Node class keeps track of input information by using Connectors.  An input
Connector holds the information about which Node is an input to a given Node,
and which output that input Node came from.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GeglConnector ##### -->
<para>

</para>

@node: 
@input: 
@source: 
@output: 

<!-- ##### FUNCTION gegl_node_get_num_inputs ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_get_num_outputs ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_node_accept ##### -->
<para>

</para>

@self: 
@visitor: 


<!-- ##### FUNCTION gegl_node_set_num_inputs ##### -->
<para>

</para>

@self: 
@num_inputs: 


<!-- ##### FUNCTION gegl_node_set_num_outputs ##### -->
<para>

</para>

@self: 
@num_outputs: 


<!-- ##### ARG GeglNode:num-inputs ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:num-outputs ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:source ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:source0 ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:source1 ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:source-output ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:source0-output ##### -->
<para>

</para>

<!-- ##### ARG GeglNode:source1-output ##### -->
<para>

</para>

