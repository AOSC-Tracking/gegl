<!-- ##### SECTION Title ##### -->
GeglEvalMgr

<!-- ##### SECTION Short_Description ##### -->
Evaluation manager for graphs

<!-- ##### SECTION Long_Description ##### -->
<para>
Each time gegl_op_apply() or gegl_op_apply_roi() is called an EvalMgr is
created to manage the setup and evaluation of the graph rooted on the passed
#GeglOp. The EvalMgr keeps track of the root and region of interest for this
apply. It sets up various visitors for traversal of the graph and makes the
preliminary passes before the actual evaluation of the Ops is done. The current
EvalMgr makes three passes over the graph.
<variablelist>
  <varlistentry>
      <term>#GeglEvalBfsVisitor</term>
        <listitem>
         <para>
The first pass is breadth-first and propagates any "inherited" attributes 
that need to be passed from root to leaves. Region of interest information 
(need_rects) is an example of this.  Each #GeglImageOp in the
graph is called by the visitor to set the need_rects of its image inputs. This
happens in gegl_image_op_compute_need_rects().
         </para>
        </listitem>
  </varlistentry>
  <varlistentry>
      <term>#GeglEvalDfsVisitor</term>
        <listitem>
          <para>
The second pass is depth-first and propagates "synthesized" attributes from 
leaves to the root.  Domain of definition information (have_rects) and 
color model information are an examples of this. Each ImageOp in the graph is 
called by the visitor to set its have_rect based on those of its image inputs.  
This happens in gegl_image_op_compute_have_rect(). This pass also sets the color 
models of each #GeglImageOp based on those of its inputs. This happens in 
gegl_image_op_compute_color_model().
          </para>
        </listitem>
  </varlistentry>
  <varlistentry>
      <term>#GeglEvalVisitor</term>
        <listitem>
         <para>
This final depth-first pass actually does the evaluation of the
graph. For each #GeglFilter it finds, the visitor calls gegl_filter_validate_inputs(),
gegl_filter_validate_outputs() and then gegl_filter_evaluate(). For each #GeglGraph
it finds it traverses the ops contained by the #GeglGraph. This visitor keeps
track of where it is in the hierarchy of Graphs so that it can find sources for
nodes in a graph that have no source for a particular input because they
are interior to a graph. See #GeglGraph for this. 
         </para>
        </listitem>
  </varlistentry>
</variablelist>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GeglEvalMgr ##### -->
<para>

</para>


<!-- ##### STRUCT GeglEvalMgrClass ##### -->
<para>

</para>

@object_class: 
@evaluate: 

<!-- ##### FUNCTION gegl_eval_mgr_get_root ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION gegl_eval_mgr_set_root ##### -->
<para>

</para>

@self: 
@root: 


<!-- ##### FUNCTION gegl_eval_mgr_get_roi ##### -->
<para>

</para>

@self: 
@roi: 


<!-- ##### FUNCTION gegl_eval_mgr_set_roi ##### -->
<para>

</para>

@self: 
@roi: 


<!-- ##### FUNCTION gegl_eval_mgr_evaluate ##### -->
<para>

</para>

@self: 


<!-- ##### ARG GeglEvalMgr:roi ##### -->
<para>

</para>

<!-- ##### ARG GeglEvalMgr:root ##### -->
<para>

</para>

