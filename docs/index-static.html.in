<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<!-- The GEGL webpage is partially autogenerated
-->
<html>
  <head>
    <title>GEGL-@GEGL_VERSION@</title>

    <link rel="icon" href="graphics/GEGL-16x16.png" type="image/png" />
    <link rel="shortcut icon" href="graphics/GEGL-16x16.png" type="image/png" />
    
    <style type='text/css'>
       @import url(gegl.css);
    </style>

    <script type='text/javascript'>
    function hide(id)
    {
      (document.getElementById(id)).style.display = "none";
    }
    function show(id)
    {
      (document.getElementById(id)).style.display = "block";
    }
    function get_visible (id)
    {
      var element = document.getElementById(id);

      if (element &&
          element.style.display &&
          element.style.display != "none")
         return true;
      return false;
    }
    function set_visible (id, visible)
    {
      var element = document.getElementById(id);

      if (element)
        {
          if (visible)
              element.style.display = "block";
          else
              element.style.display = "none";
        }
    }
    function toggle_visible (id)
    {
      if (get_visible(id))
        set_visible(id, false);
      else
        set_visible(id,true);
    }
    </script>
  </head>
  <body>

    <div class='print'>
      <div class='print_title'>
        <h1>GEGL-@GEGL_VERSION@</h1>
      </div>
    </div>

    <div class='toc'>
      <div class='print'>
         <h3>Contents</h3>
      </div>
      <ul>
        <li><a href='#GEGL'>GEGL</a></li>
        <li><a href='#Introduction'>Introduction</a></li>
        <li><a href='#Features'>&nbsp;&nbsp;Features</a></li>
        <li><a href='#Operations'>Operations</a></li>
        <li><a href='operations.html#sources'>&nbsp;&nbsp;Sources</a></li>
        <li><a href='operations.html#filters'>&nbsp;&nbsp;Filters</a></li>
        <li><a href='operations.html#composers'>&nbsp;&nbsp;Composers</a></li>
        <li><a href='#XML'>XML data model</a></li>
        <li><a href='#gegl'>&nbsp;&nbsp;gegl</a></li>
        <li><a href='gallery/index.html'>&nbsp;&nbsp;Gallery</a></li>
        <li><a href='#Building'>Building</a></li>
        <li><a href='#bootstrapping'>&nbsp;&nbsp;Bootstrapping</a></li>
        <li><a href='#Source'>Source</a></li>
        <li><a href='#source_overview'>&nbsp;&nbsp;Overview</a></li>
        <li><a href='#Todo'>Todo</a></li>
        <li><a href='#Mailinglists'>Mailinglists</a></li>
        <li><a href='#Copyright'>Copyright</a></li>
        <li><a href='#Contributors'>&nbsp;&nbsp;Contributors</a></li>
      </ul>
    </div>

    <a name='GEGL'></a>
    <div class='paper'>
      <div class='content'>

<p>
GEGL is a image processing library. 
GEGL is a library facilitating the creation, manipulation and processing
of DAGs, directed acyclic graphs, of image processing operations.
</p>

        <p>For development NEWS refer to the <a href='http://cvs.gnome.org/viewcvs/*checkout*/gegl/ChangeLog'>ChangeLog in CVS</a>.</p>

        <a name='Introduction'></a>
        <h2>Introduction</h2>
        <p>GEGL is an image processing framework written in C with glib based
        gobjects. It provides a graph-based dataflow data model for specifying
        a image processing and compositing algorithms.
        </p>
        <a name='Features'></a>
        <h3>Features</h3>

        <ul>
            <li>Graph manipulation API.</li>
            <li>XML data model</li>
            <li>Supports rectangular subregion output to linear buffers in all
                <a href='http://pippin.gimp.org/babl/'>babl</a> based
                pixel formats.</li>
            <li>Dynamically extendable with new operations.</li>
        </ul>

<p>
Algorithms created with GEGL are expressed as graphs of nodes. The nodes
have associated image processing operations. A node has output and input
pads which can be connected. By connecting these nodes in chains a set of
image operation filters and combinators can be applied to the image data.
</p>

<p>
To make GEGL process data you request a rectangular region of an node's output
pad to be rendered into a provided linear buffer, of any (supported by babl)
pixel format. GEGL is using information about the rectangular bounding-boxes
for regions that are needed to compute the requested result. For many forms of
processing it should thus be efficient to ask for only a subregion to be
recomputed. This fits well with being able to back an api that requests
rectangular regions to be repainted.
</p>

        <a name='Operations'></a>
        <h3>Operations</h3>
<p>
All nodes in the graph are operations, when dividing the operations into
categories it is done based on what input and output pads are available
for connection to other operations.
</p>

<dl>
    <dt><a href='operations.html#sources'>Sources</a></dt>
    <dd>No input pad,
    One output pad<br/>
    Example: PNG loader, webcam,</dd>

    <dt><a href='operations.html#filters'>Filters</a></dt>
    <dd>One input pad,
    <dd>One output pad<br/>
    Example: brightness and contrast, blur, threshold</dd>

    <dt><a href='operations.html#composers'>Composers</a></dt>
    <dd>Two or more input pads,
    One output pad<br/>
    Example: porter-duff and other compositing operators, displacement map</dd>

<p>
The operations are loaded from shared objects (.so files on linux .DLLs on
win32). An list of the registered operations in the enviroment where these
webpages were built, you can take a look at <a href='operations.html'>some introspection.</a></p>
    <a name='XML'></a>
    <h2>XML</h2>

    <p>
    GEGL can write and reads its data model to and from XML. The XML is
    chains of image processing commands, where some chains allow a child chain
    (the 'over' operator to implement layers for instance).
    </p>
    <p>The tree representation also allows clones, making it possible to express
    any acyclic graph where the nodes are all of the types: source, filter and composer.
    </p>
    <p>The type of operation associated with a node can be specified either
    with a <em>class</em> attribute or by using the operation name as the tag
    name for the node.
    </p>
</p>

    <a name='gegl'></a>
    <h2>gegl</h2>
<p>
GEGL comes install a binary called <u>gegl</u> binary. This is a commandline tool for using GEGL, it parses XML from file, stdin or the commandline and either displays, or saves the result of evaluating the resulting processing tree.</p>

<p>
Some examples:
</p>

<p>Render a composition to a PNG file:</p>
<pre>gegl composition.xml -o composition.png</pre>

<p>Invoke gegl like a viewer for gegl compositions:</p>
<pre>gegl -ui -d 5 composition.xml</pre>

<p>Using gegl with png's passing through stdin/stdout piping.</p>
<pre>cat input.png | gegl -o - -x "&lt;gegl&gt;
&lt;tree&gt;
  &lt;node class='invert'/&gt;
  &lt;node class='scale' x='0.5' y='0.5'/&gt;
  &lt;node class='png-load' path='-'/&gt;&lt;/tree&gt;&lt;/gegl&gt;" &gt; output.png</pre>

    <a name='Gallery'></a>
    <h2>Gallery</h2>
    <p>During the build of these webpages, all xml files in the gallery
    subfolder were processed and included in. <a href='gallery/index.html'>The
        gallery</a> is the best current illustration of GEGL.
    </p>

        <a name='Building'></a>
        <h2>Building</h2>

        <h3>Dependencies</h3>
        <p>Babl is currently building on linux, the build enviroment probably
        needs some fixes before all of it builds gracefully on many platforms.
        </p>
        <ul>
            <li>glib (including gobject, and gmodule)</li>
            <li>babl for describing pixel formats, and conversions between them</li>
            <li>optional plug-in dependencies:)
            <ul>
                 <li>SDL</li>
                 <li>libpng</li>
                 <li>libjpeg</li>
             </ul>
             </li>
         </ul>

        <a name='bootstrapping'></a>
        <h3>Bootstrapping</h3>
        <p>Save the following bash script to a file and make it executable.
        Running this probably makes quite a few assumptions, it is currently
        only known to work out of the box on my (pippin) ubuntu install with
        quite a few other general build dependencies satisfied. Read and 
        understand the script before running it.
        </p>
        <pre>
#!/bin/sh

export CVSROOT=':pserver:anonymous@anoncvs.gimp.org:/cvs/gnome'

mkdir gegl-test
cd gegl-test

echo -n "Enter sudo "
sudo echo "got root"

echo "Cleaning up any prior /usr/local babl and gegl installs"
sudo rm -rfv /usr/local/lib/*gegl* /usr/local/include/*gegl*
sudo rm -rfv /usr/local/lib/*babl* /usr/local/include/*babl*

echo "Getting sources"
cvs co babl || exit
cvs co gegl || exit
wget http://pippin.gimp.org/gegl/gegl-operations.tgz || exit
tar xvzf gegl-operations.tgz

echo "Building babl"

cd babl
./autogen.sh || exit
make || exit
echo "Installing babl"
sudo make install || exit
cd ..

echo "Building GEGL"
cd gegl
./autogen.sh || exit
make || exit
echo "Installing GEGL"
sudo make install || exit
cd ..

echo "Building GEGL operations"
cd gegl-operations
make || exit
sudo make install || exit
cd ..

echo "Rebuilding GEGL documentation"
cd gegl/docs
make clean || exit
make || exit

echo "Hopefully gegl-test/gegl/docs/gallery/index.html has a generated sample now."</pre>


        <a name='Source'></a>
        <h2>Source</h2>

        <p>
        The latest development version is available in <a href='http://cvs.gnome.org/viewcvs/gegl/'>the <em>gegl</em> module in GNOME CVS</a>.
        </p>


<a name='source_overview'></a>
<h3>Source Overview</h3>

<p>
If you're reading this, you probably have a GEGL distribution. This file
contains information about how GEGL works. It also contains information
about how babl works, since GEGL builds on top of babl.
</p>

<h4>Directories in the GEGL checkout:</h4>
<pre>gegl-dist-root
 |
 |--operations   Runtime loaded plug-ins of image processing operations.
 |
 |--gegl         core source of GEGL, graph handling, library init/deinit,
 |   |           evaluation management. Also contains common abstract base
 |   |           classes for plug-in operations.
 |   | 
 |   |--buffer   contains the implementation of Bab
 |   |            - sparse (tiled)
 |   |            - recursivly subbuffer extendable
 |   |            - clipping rectangle (defaults to bounds when making
 |   |              subbuffers)
 |   |            - storage in any babl supported pixel format
 |   |            - read/write rectangular region as linear buffer for
 |   |              any babl supported pixel format.
 |   |
 |   `--module   The code to load plug-ins located in a colon seperated list
 |               of paths from the environment variable GEGL_PATH
 |
 |--docs         A website for GEGL
 |   |
 |   |--gallery  A gallery of sample GEGL compositions.
 |   |   |
 |   |   `--data Image data used by the sample compositions.
 |   |
 |   `--graphics Misc graphics. (including SVG GEGL logo).
 |
 |--tools        some small utilities to help the build.
 |
 |
 |--tests        Unit tests, that are currently not working, since the tests
 |               now depend on deprecated behavior.
 |
 | GIL           has documentation, and seems to be in a working state, that
 |               working state is not in sync with GEGL, and it is thus dead
 |               code at the moment.
 |
 |--gil          
 |--codegen      part of gil
 `--opgen        seems to be code using an older version of gil
</pre>

<h4>Directories in the gegl-operations tarball</h4>
<pre>gegl-operations
 |
 |--file_io      Image loading and saving for png, jpg, raw, image magick...
 |--generated    Operations that have their code generated from (ruby) code
 |               generators.
 |--local        Place to add your own ops (currently contains an invert op)
 `--misc         a collection of ops.
</pre>
<h4>Directories a babl checkout</h4>
<pre>babl-dist-root
 |
 |--babl       the babl core
 |   `--base   reference implementations for RGB and Grayscale Color Models,
 |             8bit 16bit, and 32bit and 64bit floating point.
 |--extensions CIE-Lab color model as well as a naive-CMYK color model.
 |             also contains a random cribbage of old conversion optimized
 |             code from gggl. Finding more exsisting conversions in third
 |             part libraries (hermes, lcms?, liboil?) would improve the
 |             speed of babl considerably.
 |--tests      tests used to keep babl sane during development.
 `--docs       Documentation/webpage for babl.
</pre>

        <!--
        <div class='screen'>
          <p>You can also <a href='source-local.html'>browse the source</a> for
          the version this website was built. </p>
        </div>
        -->


        <a name='Extending'></a>
        <h2>Extending</h2>

        <p>To create your own operation you should start by looking for one
        that does approximatly what you already need. Copy it to a new .c
        source file, and replace the occurences of the filename (operation name
        in the source.)
        </p>
        <p>If your operation needs extra libraries, it can be added to the
        build rules of the make system (sdl and png are existing examples).
        </p>

        <a name='Todo'></a>
        <h2>Todo</h2>
        <ul>
            <li>Stabilize, document and freeze APIs</li>
            <li>Generic graphs (a new xml element called graph, instead of tree,
            with less automatic wiring happening between nodes.) to/from XML</li>
            <li>Optimize the used conversion in babl</li>
            <li>Implement infrastructure to switch in regression tested
            optimized versions per pixelformat in Operations.</li>
            <li>Implement more operations.</li>
            <li>Optimize operations.</li>
        </ul>

        <a name='Mailinglists'></a>
        <h2>Mailinglists</h2>
        <p>You can subscribe to gegl-developer and view the archives
        <a href='https://lists.XCF.Berkeley.EDU/mailman/listinfo/gegl-developer'>here</a>.
        The GEGL developer list is the appopriate place to ask development questions,
        and get more information about GEGL development in general. You can email this
        list at <a href='mailto:gegldev at gegl.org'>gegldev at gegl.org</a>.</p>
        <p>If you want to submit a bugfix or enhancement, feel free to attach
        a patch generated by the <em>diff</em> utility,
        using the <em>u</em> option to make the patch more readable.
        </p>

        <a name='Copyright'></a>
        <h2>Copyright</h2>

        <p> GEGL is free software; you can redistribute it and/or modify it
        under the terms of the <a href='LGPL'>GNU Lesser General Public
          License</a> as published by the Free Software Foundation; either
        version 2 of the License, or (at your option) any later version. </p>

        <a name='Contributors'></a>
        <h3>Contributors</h3>
<pre>
<!--AUTHORS-->          
</pre>
      </div>
    </div>
    <div class='graphic'>
    </div>

  </body>
</html>
