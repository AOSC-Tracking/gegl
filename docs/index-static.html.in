<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- If you are reading this, you might not be reading the original sourcefile,
     this GEGL webpage is generated as follows:

     index-static.html.in is passed to autoconf which gives us index-static.html
     the Makefile contains the rule to turn index-static.html into index.html, this
     allows us to mix the static content, with generated/included content.
-->
<html>
  <head>
      <title>GEGL-@GEGL_VERSION@</title>
      <link rel="shortcut icon" href="images/gegl.ico" />
    
    <style type='text/css'>
        @import url(gegl.css);
    </style>
  </head>
  <body>

    <div class='print'>
      <div class='print_title'>
        <h1>GEGL-@GEGL_VERSION@</h1>
      </div>
    </div>

    <div class='toc'>
      <div class='print'>
         <h3>Contents</h3>
      </div>
      <ul>
        <li><a href='#GEGL'>GEGL</a></li>
        <li><a href='#Features'>&nbsp;&nbsp;Features</a></li>
        <li><a href='gallery/index.html'>&nbsp;&nbsp;Gallery</a></li>
        <li><a href='#Dependencies'>&nbsp;&nbsp;Dependencies</a></li>
        <li><a href='#Download'>&nbsp;&nbsp;Download</a></li>
        <li><a href='#Bugzilla'>&nbsp;&nbsp;Bugzilla</a></li>
        <li><a href='#Mailinglist'>&nbsp;&nbsp;Mailinglist</a></li>
        <li><a href='#Copyright'>&nbsp;&nbsp;Copyright</a></li>
        <li>&nbsp;</li>
        <li><a href='#Documentation'>Documentation</a></li>
        <li><a href='#Glossary'>&nbsp;&nbsp;Glossary</a></li>
        <li><a href='operations.html'>&nbsp;&nbsp;Operations</a></li>
        <li><a href='api.html'>&nbsp;&nbsp;API reference</a></li>
        <li><a href='#HelloWorld'>&nbsp;&nbsp;Hello World</a></li>
        <li><a href='#XML'>&nbsp;&nbsp;XML data model</a></li>
        <li><a href='#Environment'>&nbsp;&nbsp;Environment</a></li>
        <li><a href='#gegl'>&nbsp;&nbsp;gegl</a></li>
        <li>&nbsp;</li>
        <li><a href='#Development'>Development</a></li>
        <!--<li><a href='#Bootstrap'>&nbsp;&nbsp;Bootstrap</a></li>-->
        <li><a href='#CodeOverview'>&nbsp;&nbsp;Code Overview</a></li>
        <li>&nbsp;</li>
        <li>&nbsp;</li>
        <li><a href='http://svn.gnome.org/viewcvs/gegl/trunk/ChangeLog?view=markup'>changes</a></li>
        <li><a href='http://bugzilla.gnome.org/buglist.cgi?product=GEGL&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED'>bugzilla</a></li>
        <li><a href='http://blog.gmane.org/gmane.comp.video.gegl.devel?set_blog_all=yes'>mailarchive</a></li>
      </ul>
    </div>

    <div class='paper'>
      <div class='content'>

        <!--RUNINFO-->          

        <a name='GEGL'></a>
        <h1>GEGL</h1>
        <p>GEGL (Generic Graphics Library) is a graph based image processing
        framework.</p>

        <p>GEGLs original design was made to scratch <a
            href='http://www.gimp.org/'>GIMP</a>s itches for a new compositing
        and processing core. This core is being designed to have minimal <a
            href='#Dependencies'>dependencies.</a> and a simple well defined
        <a href='api.html'>API</a>.
        </p>
        
        <a name='Features'></a>
        <h3>Features</h3>
        <ul>
            <li>8bit, 16bit integer and 32bit floating point, RGB, CIE Lab,
            and Y'CbCr output.</li>
            <li>Non destructive editing</li>
            <li>C, Ruby and Python interfaces.</li>
            <li>Extendable through plug-ins.</li>
            <li>XML model</li>
            <li>Iterative processing.</li>
            <li>Efficient subregion evaluation.</li>
            <li>Supports processing and display of images larger than RAM</li>
            <li>Internal sparse pyramidial render cache.</li>
            <li>Bounding box based hit detection.</li>
            <li>Rich core set of processing <a
                href='operations.html'>operations</a> that internally computes
            with HDR capable 32bit floating point.
            <ul>
              <li>PNG, JPEG, SVG, EXR, RAW and other image sources.</li>
              <li><a href='operations.html#cat_render'>Pattern renderers</a></li>
              <li><a href='operations.html#math'>Arithmetic operations</a></li>
              <li><a href='operations.html#porter_duff'>porter duff</a> compositing</li>
              <li><a href='operations.html#svgfilter'>SVG filter modes</a></li>
              <li>Gaussian blur.</li>
              <li>Unsharp mask.</li>
              <li><a href='operations.html#cat_color'>Color correction</a>.</li>
              <li>Text layout using <a href='http://pango.org/'>pango</a></li>
            </ul>
            </li>
        </ul>

        <a name='Gallery'></a>
        <h3>Gallery</h3>

        <p>For examples of what GEGLs rendering engine currently can do
        look at <a href='gallery/index.html'>the gallery</a>.
        </p>

        <!--
<p>
Algorithms created with GEGL are expressed as graphs of nodes. The nodes
have associated image processing operations. A node has output and input
pads which can be connected. By connecting these nodes in chains a set of
image operation filters and combinators can be applied to the image data.
</p>

<p>
To make GEGL process data you request a rectangular region of an node's output
pad to be rendered into a provided linear buffer, of any (supported by babl)
pixel format. GEGL is using information about the rectangular bounding-boxes
for regions that are needed to compute the requested result. For many forms of
processing it should thus be efficient to ask for only a subregion to be
recomputed. This fits well with being able to back an api that requests
rectangular regions to be repainted.
</p>
-->
        <a name='Dependencies'></a>
        <h3>Dependencies</h3>
        <p>GEGL is currently building on linux, the build enviroment probably
        needs some fixes before all of it builds gracefully on many platforms.
        </p>
        <ul>
            <li>Core
                <ul>
                  <li>glib (including gobject, and gmodule) 2.10 or newer</li>
                  <li><a href='ftp://gimp.org/pub/babl/0.0/'>babl</a> 0.0.12 or newer (for pixel-format agnostisism).</li>
                  <li>libpng (png load/export ops, and image magick fallback import)</li>
              </ul>
              </li>
            <li>GUI (sandbox for testing ops and the API)
               <ul>
                 <li>GTK+</li>
             </ul>
             </li>
            <li>Optional dependencies for operations.
            <ul>
                 <li>SDL (display op)</li>
                 <li>libjpeg (jpg loader op)</li>
                 <li>libopenexr (exr loader op)</li>
                 <li>cairo, pango (text source op)</li>
                 <li>librsvg</li>
             </ul>
             </li>
         </ul>

    <a name='Download'></a>
    <h2>Download</h2>

    <p>
    The latest development snapshot, and eventually stable versions of GEGL are
    available at <a href='ftp://ftp.gimp.org/pub/gegl/'>ftp://ftp.gimp.org/pub/gegl/</a>.
    </p>

    <p>The current code under development can be <a
href='http://svn.gnome.org/viewcvs/gegl/trunk/'>browsed online</a> and checked
out from GNOME Subversion using: </p> <pre>svn co
http://svn.gnome.org/svn/gegl/trunk/ gegl</pre>

        <a name='Bugzilla'></a>
        <h3>Bugzilla</h3>

        <p>The GEGL project uses <a href='http://bugzilla.gnome.org/'>GNOME
            Bugzilla</a>, a bug-tracking system that allows us to coordinate
        bug reports. Bugzilla is also used for enhancement requests and the
        preferred way to submit patches for GEGL is to open a bug report and
        attach the patch to it.</p>

        <p>
        Below is a list of links to get you started with Bugzilla:
        </p>
        <ul>
            <li><a href='http://bugzilla.gnome.org/buglist.cgi?product=GEGL&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED'>List of Open Bugs</a></li>
            <li><a href='http://bugzilla.gnome.org/buglist.cgi?product=GEGL&amp;bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=blocker&amp;bug_severity=critical&amp;bug_severity=major&amp;bug_severity=normal&amp;bug_severity=minor&amp;bug_severity=trivial'>List of Open Bugs (excluding enhancement requests)</a></li>
            <li><a href='http://bugzilla.gnome.org/buglist.cgi?product=GEGL&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_status=UNCONFIRMED&amp;bug_status=NEEDINFO&amp;bug_severity=enhancement'>List of Enhancement Proposals</a></li>
            <li><a href='http://bugzilla.gnome.org/reports/weekly-bug-summary.cgi'>Bugzilla Weekly Summary</a></li>
        </ul>

        <a name='Mailinglist'></a>
        <h3>Mailinglist</h3>

        <p>You can subscribe to gegl-developer and view the archives
        <a href='https://lists.XCF.Berkeley.EDU/mailman/listinfo/gegl-developer'>here</a>.
        The GEGL developer list is the appopriate place to ask development questions,
        and get more information about GEGL development in general. You can email this
        list at <a href='mailto:gegldev at gegl.org'>gegldev at gegl.org</a>.</p>

        <a name='Copyright'></a>
        <h3>Copyright</h3>

        <p> GEGL is free software; you can redistribute it and/or modify it
        under the terms of the <a href='LGPL'>GNU Lesser General Public
          License</a> as published by the Free Software Foundation; either
        version 2 of the License, or (at your option) any later version. </p>

        <a name='Contributors'></a>
        <h3>Contributors</h3>
<pre>
<!--AUTHORS-->          
</pre>

    <a name='Documentation'></a>
    <h2>Documentation</h2>
    
    <p>
    GEGLs programmer/user interface is a <a href='#Glossary-DAG'>Directed
        Acyclic Graph</a> of <a href='#Glossary-node'>nodes</a>. The DAG
    expresses a processing chain of <a
        href='#Glossary-operation'>operations</a>. A DAG, or any node in it,
    expresses a composited and processed image. It is possible to request
    rectangular regions in a wide range of pixel formats from any node. See the
    <a href='#Glossary'>Glossary</a> to decode this paragraph.
    </p>
    
    <p>The <a href='api.html'>GEGL API</a> is available from both C as
    well as <a href='http://pippin.gimp.org/rgegl/'>Ruby</a> and <a
        href='http://ervilha.org/pygegl/'>Python</a>. The <a
        href='#XML'>XML Data model</a> provides a tree based interface that
    maps to the internal DAG (Directed Acyclic Graph).

    
    <a href='#Environment'>Environment Variables</a> can be set to tune and
    instrument the behavior of GEGL. <a href='#gegl'>gegl</a> is small commandline
    tool acting as a wrapper around the XML capabilities that provides output
    to PNG. </p>


    <a name='Glossary'></a>
    <h3>Glossary</h3>
    <dl>
      <dt>connection</dt>
      <dd>A link/pipe routing image flow between operations within
            the graph goes from
                an <em>output pad</em> to an
                <em>input pad</em>, in graph glossary
                this might also be reffered to as an edge.
      </dd>
      <dt><a name='Glossary-DAG'>DAG</a></dt>
      <dd>Directed Acyclic Graph, see <em>graph</em>.</dd>
      <dt>graph</dt>
      <dd>A composition of <em>nodes</em>, the
           graph is a <em>DAG</em>.
      </dd>
      <dt><a name='Glossary-node'>node</a></dt>
      <dd>The nodes are connected in the graph. A node has an associated
      <em>operation</em> or can be constructed <em>graph</em>.
      </dd>
      <dt><a name='Glossary-operation'>operation</a></dt>
      <dd>The processing primitive of GEGL, is where the actual image
      processing takes place. Operations are plug-ins and provide the
      actual functionality of GEGL</dd>
      <dt>pad</dt>
      <dd>The part of a node that exchanges image content. The place
          where image &quot;pipes&quot; are used to connect the various
          operations in the composition.
          <dl>
            <dt>input pad</dt>
            <dd>consumes image data, might also be seen as an
                image parameter to the operation.
            </dd>
            <dt>output pad</dt>
            <dd>a place where data can be requested, multiple
                input pads can reference the same output pad.
            </dd>
          </dl>
      </dd>
      <dt>property</dt>
      <dd>Properties are what control the behavior of operations, through the
      use of GParamSpecs properties are self documenting through introspection.
      </dd>
  </dl>

    <a name='Operations'></a>
    <h3>Operations</h3>
    <p>The main source of documentation as GEGL grows is the <a
        href='operations.html'>Operations</a> reference. Plug-ins themselves
    register information about the categories they belong to, what they do, and
    documentation of the available parameters. </p>

  <a name='HelloWorld'></a>
  <h3>Hello world</h3>
  <p>This is a small sample GEGL application that animates a zoom on a mandelbrot
  fractal</p>

<pre>
<!--HELLO-WORLD-->
</pre>

  <h4>Compiling</h4>
  <p>GEGL uses pkg-config for passing the needed compile time options,
  download <a href='hello-world.c'>hello-world.c</a> and typing what follows in
  a terminal after succesfully installing GEGL should produce a working binary.
  </p>
  <pre>gcc hello-world.c `pkg-config --libs --cflags gegl` -o hello-world</pre>

    <a name='XML'></a>
    <h3>XML data model</h3>

    <p>The tree allows clones, making it possible to express any acyclic graph
    where the nodes are all of the types: source, filter and composer. </p>
    <p>
    GEGL can write and reads its data model to and from XML. The XML is
    chains of image processing commands, where some chains allow a child chain
    (the 'over' operator to implement layers for instance).
    </p>
    <p>The type of operation associated with a node can be specified either
    with a <em>class</em> attribute or by using the operation name as the tag
    name for the node.
    </p>
    <p>For documentation on how this XML works, take a look at the sources
    in the <a href='gallery/index.html'>gallery.</a> And browse the
    <a href='operations.html'>documentation for operations</a>.</p>

        <a name='Environment'></a>
        <h3>Environment</h3>
        <p>Some environment variables can be set to alter how GEGL runs, this
        list might not be exhaustive but it should list the most useful ones.
        </p>
        <dl>
            <dt>BABL_STATS</dt><dd>
            When set babl will write a html file (/tmp/babl-stats.html)
            containing a matrix of used conversions, as well as all
            existing conversions and which optimized paths are followed.</dd>

            <dt>BABL_ERROR</dt>
            <dd>The amount of error that babl tolerates, set it to for instance 0.1 to use some conversions that trade some quality for speed.</dd>
            <dt>GEGL_DEBUG_BUFS</dt>
            <dd>Display tile/buffer leakage statistics.
            </dd>
            <dt>GEGL_DEBUG_RECTS</dt>
            <dd>Show the results of have/need rect negotiations.
            </dd>
            <dt>GEGL_DEBUG_TIME</dt>
            <dd>Print a performance instrumentation breakdown of GEGL and it's operations.
            </dd>
            <dt>GEGL_SWAP</dt>
            <dd>The directory where temporary swap files are written, if not
            specified GEGL will not swap to disk. Be aware that swapping to
            disk is still experimental and GEGL is currently not removing
            the per process swap files.
            </dd>
        </dl>
    <a name='gegl'></a>
    <h3>gegl</h3>
<p>
GEGL provides a commandline tool called <em>gegl</em>, for working with the XML
data model from file, stdin or the commandline. It can display the result of
processing the layer tree or save it to file.</p>

<p>
Some examples:
</p>

<p>Render a composition to a PNG file:</p>
<pre>gegl composition.xml -o composition.png</pre>

<p>Invoke gegl like a viewer for gegl compositions:</p>
<pre>gegl -ui -d 5 composition.xml</pre>

<p>Using gegl with png's passing through stdin/stdout piping.</p>
<pre>cat input.png | gegl -o - -x "&lt;gegl&gt;
&lt;tree&gt;
  &lt;node class='invert'/&gt;
  &lt;node class='scale' x='0.5' y='0.5'/&gt;
  &lt;node class='png-load' path='-'/&gt;&lt;/tree&gt;&lt;/gegl&gt;" &gt; output.png</pre>

        The latest development version is available in <a
            href='http://svn.gnome.org/viewcvs/gegl/trunk/'>the <em>gegl</em> module
            in GNOME Subversion</a>. 
    <h4>gegl usage</h4>
    The following is the usage information of the gegl binary, this
    documentation might not be complete.

    <pre>
    <!--GEGL_USAGE-->
    </pre>
        
    <a name='Development'></a>

    <h2>Development</h2>

    <p>
    GEGL uses <a href='#Bugzilla'>bugzilla</a> to track feature requests and
    contributions.
    A description of what the various directories in the GEGL checkout is in
    the <a href='#CodeOverview'>Code Overview</a>. Most coders working with
    gegl would probably be <a href='#extending'>extending</a> it through
    operations.
    </p>

<a name='CodeOverview'></a>
<h3>Code Overview</h3>

<h4>Directories in the GEGL checkout:</h4>
<pre>gegl-dist-root
 │
 │
 ├──gegl             core source of GEGL, graph handling, library init/deinit,
 │   │               evaluation management. Also contains common abstract base
 │   │               classes for plug-in operations.
 │   │ 
 │   ├──buffer       contains the implementation of Bab
 │   │                - sparse (tiled)
 │   │                - recursivly subbuffer extendable
 │   │                - clipping rectangle (defaults to bounds when making
 │   │                  subbuffers)
 │   │                - storage in any babl supported pixel format
 │   │                - read/write rectangular region as linear buffer for
 │   │                  any babl supported pixel format.
 │   │
 │   └──module        The code to load plug-ins located in a colon seperated
 │                    list of paths from the environment variable GEGL_PATH
 │
 ├──operations        Runtime loaded plug-ins for image processing operations.
 │   │
 │   ├──core          Basic operations tightly coupled with GEGL.
 │   │
 │   ├──blur          Blurring operations.
 │   ├──color         Color adjustments.
 │   ├──display       Operations that show image data as a side effect.
 │   ├──meta          Operations that are made by gegl graphs.
 │   ├──file-io       File loaders.
 │   ├──render        Operations providing patters, graidents, fills, ...
 │   ├──transform     transforming/resampling operations
 │   ├──transparency  opacity/mask control
 │   ├──generated     Operations generated from scripts (currently
 │   │                ruby scripts.) (arithmetic, compositing, ...)
 │   └──workshop      Works in progress, (not compiled by default)
 │       └──generated
 │                    
 ├──bin               gegl binary, for processing XML compositions to png files.
 │
 ├──docs              A website for GEGL
 │   │
 │   └──gallery       A gallery of sample GEGL compositions.
 │       │
 │       └──data      Image data used by the sample compositions.
 │    
 │
 └──tools             some small utilities to help the build.
</pre>

<h4>Directories of babl</h4>
<pre>babl-dist-root
 │
 ├──babl       the babl core
 │   └──base   reference implementations for RGB and Grayscale Color Models,
 │             8bit 16bit, and 32bit and 64bit floating point.
 ├──extensions CIE-Lab color model as well as a naive-CMYK color model.
 │             also contains a random cribbage of old conversion optimized
 │             code from gggl. Finding more exsisting conversions in third
 │             part libraries (hermes, lcms?, liboil?) would improve the
 │             speed of babl considerably.
 ├──tests      tests used to keep babl sane during development.
 └──docs       Documentation/webpage for babl.
</pre>

        <a name='extending'></a>
        <h3>Extending</h3>

        <p>To create your own operations you should start by looking for one
        that does approximatly what you already need. Copy it to a new .c
        source file, and replace the occurences of the filename (operation name
        in the source.)
        </p>

        <p>Most of the operations do not use the verbose gobject syntax, but preprocessor
        tricks turning the boilerplate in a <a
            href='http://svn.gnome.org/viewcvs/gegl/trunk/operations/color/brightness-contrast.c?view=markup'>short chant</a>.</p>
      </div>
    </div>
    <div class='graphic'>
    </div>

  </body>
</html>
