<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- If you are reading this, you might not be reading the original sourcefile,
     this GEGL webpage is generated as follows:

     index-static.html.in is passed to autoconf which gives us index-static.html
     the Makefile contains the rule to turn index-static.html into index.html, this
     allows us to mix the static content, with generated/included content.
-->
<html>
  <head>
    <title>GEGL-@GEGL_VERSION@</title>
    
    <style type='text/css'>
       @import url(gegl.css);
    </style>

    <script type='text/javascript'>
    function hide(id)
    {
      (document.getElementById(id)).style.display = "none";
    }
    function show(id)
    {
      (document.getElementById(id)).style.display = "block";
    }
    function get_visible (id)
    {
      var element = document.getElementById(id);

      if (element &&
          element.style.display &&
          element.style.display != "none")
         return true;
      return false;
    }
    function set_visible (id, visible)
    {
      var element = document.getElementById(id);

      if (element)
        {
          if (visible)
              element.style.display = "block";
          else
              element.style.display = "none";
        }
    }
    function toggle_visible (id)
    {
      if (get_visible(id))
        set_visible(id, false);
      else
        set_visible(id,true);
    }
    </script>
  </head>
  <body>

    <div class='print'>
      <div class='print_title'>
        <h1>GEGL-@GEGL_VERSION@</h1>
      </div>
    </div>

    <div class='toc'>
      <div class='print'>
         <h3>Contents</h3>
      </div>
      <ul>
        <li><a href='#GEGL'>GEGL</a></li>
        <li><a href='#Features'>&nbsp;&nbsp;Features</a></li>
        <li><a href='operations.html'>Operations</a></li>
        <li><a href='operations.html#sources'>&nbsp;&nbsp;Sources</a></li>
        <li><a href='operations.html#filters'>&nbsp;&nbsp;Filters</a></li>
        <li><a href='operations.html#composers'>&nbsp;&nbsp;Composers</a></li>
        <li><a href='#XML'>XML data model</a></li>
        <li><a href='gallery/index.html'>&nbsp;&nbsp;Gallery</a></li>
        <li><a href='#gegl'>&nbsp;&nbsp;<em>gegl</emhttp://pippin.gimp.org/gegl/gallery/index.html></a></em></li>
        <li><a href='#Environment'>Environment</a></li>
        <li><a href='#Source'>Source</a></li>
        <li><a href='#dependencies'>&nbsp;&nbsp;Dependencies</a></li>
        <li><a href='#source_overview'>&nbsp;&nbsp;Overview</a></li>
        <li><a href='#bootstrapping'>&nbsp;&nbsp;Bootstrapping</a></li>
        <li><a href='#extending'>&nbsp;&nbsp;Extending</a></li>
        <li><a href='#Todo'>Todo</a></li>
        <li><a href='#Mailinglists'>Mailinglists</a></li>
        <li><a href='#Copyright'>Copyright</a></li>
        <li><a href='#Contributors'>&nbsp;&nbsp;Contributors</a></li>
      </ul>
    </div>

    <a name='GEGL'></a>
    <div class='paper'>
      <div class='content'>

        <a name='GEGL'></a>
        <h1>GEGL</h1>
        <p>GEGL (Generic Graphics Library) is an image processing library written in C using gobject
        from glib for object orientation.</p>
        
        <a name='Features'></a>
        <h3>Features</h3>
        <ul>
            A large number of supported color models and datatypes and new models and types can be added
            easily through plug-ins for <a href='http://pippin.gimp.org/babl/'>babl</a>.</li>
            <li>Core image processing and compositing <a href='operations.html'>operations</a></li>
            <li>Additional image processing operations loaded from plug-in</li>
            <li>Construction of chains (DAGs or Directed Acyclic Graphs) of
            operations</li>
            <li>Memory efficient computation of rectangular ROI (region of interest).</li>
            <li>Layer tree XML data model, with layer groups, filters (adjustment layers) and clones.</li>
        </ul>

        <!--
<p>
Algorithms created with GEGL are expressed as graphs of nodes. The nodes
have associated image processing operations. A node has output and input
pads which can be connected. By connecting these nodes in chains a set of
image operation filters and combinators can be applied to the image data.
</p>

<p>
To make GEGL process data you request a rectangular region of an node's output
pad to be rendered into a provided linear buffer, of any (supported by babl)
pixel format. GEGL is using information about the rectangular bounding-boxes
for regions that are needed to compute the requested result. For many forms of
processing it should thus be efficient to ask for only a subregion to be
recomputed. This fits well with being able to back an api that requests
rectangular regions to be repainted.
</p>
-->

    <a name='XML'></a>
    <h2>XML</h2>

    <p>The tree allows clones, making it possible to express any acyclic graph
    where the nodes are all of the types: source, filter and composer. </p>
    <p>
    GEGL can write and reads its data model to and from XML. The XML is
    chains of image processing commands, where some chains allow a child chain
    (the 'over' operator to implement layers for instance).
    </p>
    <p>The type of operation associated with a node can be specified either
    with a <em>class</em> attribute or by using the operation name as the tag
    name for the node.
    </p>
    <p>For documentation on how this XML works, take a look at the sources
    in the <a href='gallery/index.html'>gallery.</a> And browse the
    <a href='operations.html'>documentation for operations</a>.</p>
</p>

    <a name='gegl'></a>
    <h2>gegl</h2>
<p>
GEGL provides a commandline tool called <em>gegl</em>, which parses XML from file, stdin or the commandline. It can display the result of processing the layer tree or save it to file.</p>

<p>
Some examples:
</p>

<p>Render a composition to a PNG file:</p>
<pre>gegl composition.xml -o composition.png</pre>

<p>Invoke gegl like a viewer for gegl compositions:</p>
<pre>gegl -ui -d 5 composition.xml</pre>

<p>Using gegl with png's passing through stdin/stdout piping.</p>
<pre>cat input.png | gegl -o - -x "&lt;gegl&gt;
&lt;tree&gt;
  &lt;node class='invert'/&gt;
  &lt;node class='scale' x='0.5' y='0.5'/&gt;
  &lt;node class='png-load' path='-'/&gt;&lt;/tree&gt;&lt;/gegl&gt;" &gt; output.png</pre>

        <a name='Building'></a>
        <h2>Building</h2>

        <a name='dependencies'></a>
        <h3>Dependencies</h3>
        <p>GEGL is currently building on linux, the build enviroment probably
        needs some fixes before all of it builds gracefully on many platforms.
        </p>
        <ul>
            <li>glib (including gobject, and gmodule) 2.10 or newer</li>
            <li>babl for describing pixel formats, and conversions between them (from CVS)</li>
            <li>dependencies for some of the operations (currently not detected properly).</li>
            <ul>
                 <li>SDL (display op)</li>
                 <li>libpng (png loader/export ops)</li>
                 <li>libjpeg (jpg loader op)</li>
                 <li>cairo (text source op)</li>
             </ul>
             </li>
         </ul>

        <a name='bootstrapping'></a>
        <h3>Bootstrapping</h3>
        <p>Save the following bash script to a file and make it executable.
        Running this probably makes quite a few assumptions, it is currently
        only known to work out of the box on my (pippin) ubuntu install with
        quite a few other general build dependencies satisfied. Read and 
        understand the script before running it.
        </p>
        <pre>
#!/bin/sh

export CVSROOT=':pserver:anonymous@anoncvs.gimp.org:/cvs/gnome'

mkdir gegl-test
cd gegl-test

echo -n "Enter sudo "
sudo echo "got root"

echo "Cleaning up any prior /usr/local babl and gegl installs"
sudo rm -rfv /usr/local/lib/*gegl* /usr/local/include/*gegl*
sudo rm -rfv /usr/local/lib/*babl* /usr/local/include/*babl*

echo "Getting sources"
cvs co babl || exit
cvs co gegl || exit

echo "Building babl"

cd babl
./autogen.sh || exit
make || exit
echo "Installing babl"
sudo make install || exit
cd ..

echo "Building GEGL"
cd gegl
./autogen.sh || exit
make || exit
echo "Installing GEGL"
sudo make install || exit
cd ..

echo "Hopefully gegl-test/gegl/docs/gallery/index.html has a generated sample now."</pre>

        <a name='Environment'></a>
        <h2>Environment</h2>
        <p>Some environment variables can be set to alter how GEGL runs, this
        list might not be exhaustive but it should list the most useful ones.
        </p>
        <dl>
            <dt>BABL_STATS</dt><dd>
            When set babl will write a html file (/tmp/babl-stats.html)
            containing a matrix of used conversions, as well as all
            existing conversions and which optimized paths are followed.</dd>

            <dt>BABL_ERROR</dt>
            <dd>The amount of error that babl tolerates, set it to for instance 0.1 to use some conversions that trade some quality for speed.</dd>
            <dt>GEGL_DEBUG_BUFS</dt>
            <dd>Display tile/buffer leakage statistics.
            </dd>
            <dt>GEGL_DEBUG_RECTS</dt>
            <dd>Show the results of have/need rect negotiations.
            </dd>
        </dl>

        <a name='Source'></a>
        <h2>Source</h2>

        <p>
        The latest development version is available in <a href='http://cvs.gnome.org/viewcvs/gegl/'>the <em>gegl</em> module in GNOME CVS</a>.
        </p>


<a name='source_overview'></a>
<h3>Source Overview</h3>

<p>
If you're reading this, you probably have a GEGL distribution. This file
contains information about how GEGL works. It also contains information
about how babl works, since GEGL builds on top of babl.
</p>

<h4>Directories in the GEGL checkout:</h4>
<pre>gegl-dist-root
 |
 |
 |--gegl         core source of GEGL, graph handling, library init/deinit,
 |   |           evaluation management. Also contains common abstract base
 |   |           classes for plug-in operations.
 |   | 
 |   |--buffer   contains the implementation of Bab
 |   |            - sparse (tiled)
 |   |            - recursivly subbuffer extendable
 |   |            - clipping rectangle (defaults to bounds when making
 |   |              subbuffers)
 |   |            - storage in any babl supported pixel format
 |   |            - read/write rectangular region as linear buffer for
 |   |              any babl supported pixel format.
 |   |
 |   `--module   The code to load plug-ins located in a colon seperated list
 |               of paths from the environment variable GEGL_PATH
 |
 |--operations   Runtime loaded plug-ins for image processing operations.
 |
 |--docs         A website for GEGL
 |   |
 |   |--gallery  A gallery of sample GEGL compositions.
 |   |   |
 |   |   `--data Image data used by the sample compositions.
 |   |
 |   `--graphics Misc graphics. (including SVG GEGL logo).
 |
 |--tools        some small utilities to help the build.
 |
 |
 |--tests        Unit tests, that are currently not working, since the tests
 |               now depend on deprecated behavior.
 |
 | GIL           has documentation, and seems to be in a working state, that
 |               working state is not in sync with GEGL, and it is thus dead
 |               code at the moment.
 |
 |--gil          
 |--codegen      part of gil
 `--opgen        seems to be code using an older version of gil
</pre>

<h4>Directories a babl checkout</h4>
<pre>babl-dist-root
 |
 |--babl       the babl core
 |   `--base   reference implementations for RGB and Grayscale Color Models,
 |             8bit 16bit, and 32bit and 64bit floating point.
 |--extensions CIE-Lab color model as well as a naive-CMYK color model.
 |             also contains a random cribbage of old conversion optimized
 |             code from gggl. Finding more exsisting conversions in third
 |             part libraries (hermes, lcms?, liboil?) would improve the
 |             speed of babl considerably.
 |--tests      tests used to keep babl sane during development.
 `--docs       Documentation/webpage for babl.
</pre>

        <!--
        <div class='screen'>
          <p>You can also <a href='source-local.html'>browse the source</a> for
          the version this website was built. </p>
        </div>
        -->


        <a name='extending'></a>
        <h2>Extending</h2>

        <p>To create your own operations you should start by looking for one
        that does approximatly what you already need. Copy it to a new .c
        source file, and replace the occurences of the filename (operation name
        in the source.)
        </p>

        <p>Most of the operations do not use the verbose gobject syntax, but preprocessor
        tricks turning the boilerplate in a <a
            href='http://cvs.gnome.org/viewcvs/gegl/operations/core/crop.c?view=markup'>short
            chant</a>.

        <a name='Todo'></a>
        <h2>Todo</h2>
        <ul>
            <li>Stabilize, document and freeze APIs</li>
            <li>Allow graphs to be filters/composers in XML</li>
            <li>Optimize the used conversion in babl</li>
            <li>Implement infrastructure to switch in regression tested
            optimized versions per pixelformat in Operations.</li>
            <li>Implement more operations.</li>
            <li>Optimize operations.</li>
            <li>Resurrect GIL, or even multiple alternate code generators for differnt classes of operations.</li>
        </ul>

        <a name='Mailinglists'></a>
        <h2>Mailinglists</h2>
        <p>You can subscribe to gegl-developer and view the archives
        <a href='https://lists.XCF.Berkeley.EDU/mailman/listinfo/gegl-developer'>here</a>.
        The GEGL developer list is the appopriate place to ask development questions,
        and get more information about GEGL development in general. You can email this
        list at <a href='mailto:gegldev at gegl.org'>gegldev at gegl.org</a>.</p>
        <p>If you want to submit a bugfix or enhancement, feel free to attach
        a patch generated by the <em>diff</em> utility,
        using the <em>u</em> option to make the patch more readable.
        </p>

        <a name='Copyright'></a>
        <h2>Copyright</h2>

        <p> GEGL is free software; you can redistribute it and/or modify it
        under the terms of the <a href='LGPL'>GNU Lesser General Public
          License</a> as published by the Free Software Foundation; either
        version 2 of the License, or (at your option) any later version. </p>

        <a name='Contributors'></a>
        <h3>Contributors</h3>
<pre>
<!--AUTHORS-->          
</pre>
      </div>
    </div>
    <div class='graphic'>
    </div>

  </body>
</html>
