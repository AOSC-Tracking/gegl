.---. .--- .---. .
| __  |__  | __  |
|   | |    |   | |
`---| `--- `---| `---                            temporally deficient roadmap
=============================================================================

GEGL buffers
-----------------------------------------------------------------------------

Make GeglBuffer be an interface (or a use composition and allow for 
TiledBackend, LinearBackend GimpTileManagerBackend). This will make
integration with legacy GIMP code much easier.

Desired backends:
 - further evolution of horizon/gegl tile interface with tiled mipmapping
 - linear buffers
 - gimp tile manager
 - GPU memory (for shader code)
 - verse
 - krita
 - image/graphics-magick?


Optimized evaluation methods
-----------------------------------------------------------------------------

Right now all computation is done in 32bit floating point RGBA. Allowing to
register optimized versions of different pixel formats (that can be regression
tested against the float implementation) is and important step. This would also
allow to plug-in external code, like snippets of cairo code to do evaluation in
8bit.


Pixel format negotation
-----------------------------------------------------------------------------

When more pixel-format versions exist of OPs, more works needs to be done
when iterating the GRAPH, the desired op, and the format with which the
image data flows in the graph needs to be negotiatied between speed and quality.


Composition File format
-----------------------------------------------------------------------------
A file format is grafually evolving, the XML handling might even end up handling
multiple different file formats, at the moment work being done to improve
interoperability through efforts to define an Exhange format for structured
Raster data.

GIMP plug-in proxy op.
-----------------------------------------------------------------------------

A GEGL operation acting as a proxy to legacy gimp plug-ins will drag a lot
of the existing GIMP functionality along.

GEGL operation API freeze
-----------------------------------------------------------------------------

At some point the plug-in api for GEGL should be declared stable.

Multithreading
-----------------------------------------------------------------------------
Make it possible to have multiple evaluations of the graph happening at the
same time. (both the way the visitor pattern is implemented, and the reference
counting for immediate freeing of buffers assumes a single thread of operation
at the moment.)


Operations
==========

Caching operation
-----------------

Write an operations that maintains a sparse backing buffer the size of the HAVE
rect of the operations. Keeps rendered information, and keeps cached computations
as long as the properties have not changed.

An initial implementation of this should be designed to work directly on top of
source nodes only. Later a similar approach could be extended to work on subgraphs,
multiple such caches could be used as well, speeding up reevaluations at the expense
of extra tiles used for caching intermediate results.

Currently the meta loader contains it's own simplistic caching, per file loader caching
will be removed, to make the code needed for each importer node as simple as possible.
Thus the other file loaders should probably be hidden.

text source
-----------

Use pango for rendering, expose more parameters, perhaps look at integrating
the pango interface provided by GIMP?

SVG loader
----------

With basis in the text source (which uses cairo), create an operation that renders
to a buffer in a similar fashion using librsvg for the SVG parsing.
