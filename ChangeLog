Wed Feb 23 17:45:55 PST 2000 caro@rhythm.com
	
	* Rm-ed compile errors
	
	* Added more parse functionality

	* included a dir with test files

Wed Feb 23 12:13:42 EST 2000 calvinw@mindspring.com

	* Cleaned up the initial codegen import.  


Tue Feb 22 16:26:59 PST 2000 caro@rhythm.com

	* Initial check in of codegen dir

	* This hopefully will become a parser that will 
	create data type specific code from generic code.


Fri Feb 18 12:48:30 PST 2000 calvinw@mindspring.com

        * Added CompositePremultOp ,SingleSrcOp class

	* Updated the algorithms in CompositeOp ,CompositePremultOp
	PremultOp, UnpremultOp.

	* Made all the appropriate Ops subclasses of SingleSrcOp
	or DualSrcOp
  
Feb 11 18:24:50 EST 2000 calvinw@mindspring.com

	* removed the Iterator type routines from ImageBuffer. 
  
	* updated testgeglfile to use these new routines. 

Fri Feb 11 17:38:13 EST 2000 calvinw@mindspring.com

	* rm gegl-chancopy-op.gob (renamed it)

	* added these files: 
	  gegl-copy-chan-op.gob
	  gegl-dual-src-op.gob
	  gegl-image-iterator.gob

	* updated all the ops to use the ImageIterator class

	* updated README to say use gob-0.92.3 

	* updated the generic algorithms for: 
	  gegl-add-op.gob
	  gegl-dark-op.gob
	  gegl-diff-op.gob
	  gegl-light-op.gob
	  gegl-max-op.gob
	  gegl-min-op.gob
	  gegl-mult-op.gob
	  gegl-screen-op.gob
	  gegl-subtract-op.gob

	* lots of little cleanups in most op classes 
	

Tue Feb  8 16:08:54 PST 2000 caro@rhythm.com

	* added gegl-chancopy-op.gegl and gegl-add-op.gegl
	
	* fixed warnings 


	* added gegl-chancopy-op.gegl and gegl-add-op.gegl
	
	* fixed warnings 

Tue Feb  1 16:18:41 PST 2000 caro@rhythm.com

	* added these files
		gegl-mult-op.gob
		gegl-min-op.gob
		gegl-max-op.gob
		gegl-subtract-op.gob
		gegl-diff-op.gob
		gegl-dark-op-.gob
		gegl-light-op.gob
		gegl-sceen-op.gob
	
	* rm CLAMP in gegl-type.h
	
	* Clamped the values i rounded  

	* Changed testgeglfile.c so that it tests the new functions

Mon Jan 31 17:48:34 PST 2000 caro@rhythm.com

        * fixed bugs in gegl-composite-op. It should work now.

	* tested the torgb, togray, tou8, tofloat function in
	gegl-color-model. They seem to work fine.

Mon Jan 31 14:11:17 EST 2000 calvinw@mindspring.com

	*fixed bugs in destroy methods of all convert-ops:  
         gegl-color-convert-to-rgb-float-op.gob
         gegl-color-convert-to-rgb-u8-op.gob
         gegl-color-convert-to-gray-float-op.gob
         gegl-color-convert-to-gray-u8-op.gob
         gegl-color-convert-connection-op.gob

	*updated the PrintOp and FillOp to handle u8 and gray cases. 

	*updated testgegl to test the color conversion routines. 

Sun Jan 30 16:03:20 EST 2000 calvinw@mindspring.com

	*added ColorConvertConnectionOp class  
	 which handles conversion through an xyz float space

	*updated all the convert ops to call to_float, to_u8, to_gray, 
	 to_rgb routines of the appropriate color model classes. 

	*cleaned up some in the ColorModel classes. 

	*added a color model maker routine to gegl-utils.c 
         (need a factory thing). 

Sat Jan 29 15:29:38 PST 2000 caro@rhythm.com

	* added to_float, to_u8, to_gray, to_rgb
	to color_model classes.

	* changed to_xyz, from_xyz in color_model
	so that it takes now a float** arg instead of a float*

Fri Jan 28 16:37:57 PST 2000 Manish Singh <yosh@gimp.org>

	* configure.in: autodetect gob and error out if not there

	* Makefile.am: revamp the build process to automatically care for
	gob stuff

	* reformatted the ChangeLog to be consistent with other projects

Fri Jan 28 18:42:26 EST 2000 calvinw@mindspring.com

	* Added the gegl-color-convert-op.gob 
	* Added the gegl-color-convert-to-rgb-float-op.gob 
	* Added the gegl-color-convert-to-rgb-u8-op.gob 
	* Added the gegl-color-convert-to-gray-float-op.gob 
	* Added the gegl-color-convert-to-gray-u8-op.gob 
	* removed gegl-convert-rgb-op.gob
	* removed gegl-convert-gray-op.gob

Fri Jan 28 14:12:37 PST 2000 caro@rhythm.com
	
	* Simplified the gegl-composite-op.pregob

Thu Jan 27 13:05:25 PST 2000 caro@rhythm.com

	* Changed varible names in gegl-composite-op

	* Created a gegl-composite-op.pregob

Wed Jan 26 14:05:54 PST 2000 caro@rhythm.com

	* Fixed some bugs in gegl-color_model-gray
	  and gegl-convert-rgb/gray-op 

Wed Jan 26 13:42:07 PST 2000 caro@rhythm.com

	* Forgot to add gegl-convert-gray.gob

Wed Jan 26 13:03:51 PST 2000  caro@rhythm.com

	* Fixed some bugs in gegl-composite-op.gob

	* Added gegl-color-model-gray, gegl-color-model-gray-float
	  gegl-color-model-gray-u8

	* Added some function to take care of most of the cases in
	  gegl-composite-op.gobi for unpremult and premult with or
	  without alpha

	* Added suport for the color_models to convert from and to
	  XYZ space.

Tue Jan 25 10:51:05 EST 2000 calvinw@mindspring.com

	* More details for GeglDrawable class.  

	* Fixed a bunch of gegl_destroys to be correct.

	* Straightened out some of the forward header problems
	  by updating to gob-0.92.2. No gob patch is necessary
	  now.

Mon Jan 24 11:27:03 EST 2000  calvinw@mindspring.com

	* Fixed the GOB_PUBLIC_HEADER in Makefile.am for
	  gegl-composite-op.h gegl-premult-op.h gegl-unpremult-op.h

	* Fixed some of set_color for GeglColorModelRgbU8.
	  channels[i].u8 is how to get 8bit version of a GeglColor.

	* Use guint8 not guchar for 8bit data type code.

	* Added more to GeglDrawable class.

Sun Jan 23 13:13:18 EST 2000  calvinw@mindspring.com 
	
	* added caros testgeglfile --which opens 2 tiffs
	  to test the composite ops. 

	* made a bunch of code more readable. 

Fri Jan 21 17:59:49 PST 2000  caro@rhythm.com

	* added some U8 support
	* implemented part of convert, composite ops

Thu Jan 20 09:20:48 PST 2000  calvinw@mindspring.com  

	* initial import  

	* The following classes have initial versions:

	  GeglObject -- base class for gegl classes  
	  GeglOp -- class for operators  
	  GeglPointOp  -- operators that only need (x,y) to compute pixel (x,y)
	  GeglFillOp -- fills images with a color
	  GeglPrintOp -- prints out the pixel values of an image (floats only now)
	  GeglImageBuffers -- buffers for image data and pointers to data 
	  GeglColorModel -- ColorSpace, color channels, alpha info, data type 
	  GeglColorModelRgb -- subclass of RGB color models
	  GeglColorModelRgbFloat -- floating pt channels RGB color model 
	  GeglColor -- stores channels for a single color 

	* There is a small test program -- testgegl
