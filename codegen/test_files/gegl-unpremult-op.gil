%h{
#include "gegl-single-src-op.h"
%}
%{
#include "gegl-unpremult-op.h"
#include "gegl-unpremult-op-private.h"
#include "gegl-single-src-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-image-buffer.h"
#include "gegl-image-iterator.h"
#include "gegl-color.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}

class Gegl:Unpremult:Op from Gegl:Single:Src:Op {

  
  public 
  GeglUnpremultOp *
  new (GeglImageBuffer *dest,
       GeglImageBuffer *src,
       GeglRect *dest_rect,
       GeglRect *src_rect)
  {
    GeglUnpremultOp * self = GEGL_UNPREMULT_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, dest, src, dest_rect, src_rect))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
              GeglImageBuffer *dest,
              GeglImageBuffer *src,
              GeglRect *dest_rect,
              GeglRect *src_rect) 
  {
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
    
    /* Chain up */
    if (!gegl_single_src_op_constructor (
          GEGL_SINGLE_SRC_OP(self), dest, src, dest_rect, src_rect))
      return FALSE;
   {
     GeglPointOpClass *point_op_class = 
       GEGL_POINT_OP_CLASS(GTK_OBJECT(self)->klass);
     GeglColorModel *cm = gegl_image_buffer_color_model (dest);
     gboolean has_alpha = gegl_color_model_has_alpha(cm);
      
     if(has_alpha)
       point_op_class->scanline_func = 
         gegl_unpremult_op_scanline_COLORSPACE_DATATYPE;
     else
       {
         g_warning("GeglPremultOp: dest has no alpha channel\n");
         return FALSE;
       } 
    }

    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  private 
  void
  scanline_COLORSPACE_DATATYPE (GeglPointOp *point_op)
  {
    GeglPointOpPrivate *point_opP = 
        (GeglPointOpPrivate *)(point_op->_priv); 

    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha);
    Pixel src(color,alpha);
    GENERIC_IMAGE_DECL_END

    gint width = point_opP->scanline_width;

    gegl_image_iterator_get_scanline_data ( 
                      point_opP->iterators[0], 
                      (guchar**)dest_data);
    gegl_image_iterator_get_scanline_data ( 
                      point_opP->iterators[1],
                      (guchar**)src_data);

    GENERIC_IMAGE_IMAGE_DATA_INIT 

    while (width--)
      {
        GENERIC_IMAGE_BLOCK_BEGIN

        if(src_alpha == WP)
          {
            dest_color =  src_color;
          }
	else if (src_alpha == ZERO)
	  {
	    dest_color = ZERO;
	  }
        else
          {
            dest_color =  src_color / src_alpha;
          }
	dest_alpha = src_alpha;
	
	dX(dest,1);
	dX(src,1); 

        GENERIC_IMAGE_BLOCK_END;
      }
  }
}
