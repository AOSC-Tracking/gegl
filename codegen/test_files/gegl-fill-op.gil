%h{
#include "gegl-point-op.h"
%}
%{
#include "gegl-fill-op.h"
#include "gegl-fill-op-private.h"
#include "gegl-point-op-private.h"
#include "gegl-op-private.h"
#include "gegl-object-private.h"
#include "gegl-point-op.h"
#include "gegl-image-iterator.h"
#include "gegl-image-buffer.h"
#include "gegl-color.h"
#include "gegl-color-model.h"
#include "gegl-utils.h"
#include <stdio.h>
%}


class Gegl:Fill:Op from Gegl:Point:Op {

  private GeglColor *fill_color;
  
  public 
  GeglFillOp *
  new (GeglImageBuffer *dest, 
       GeglRect *dest_rect,
       GeglColor *fill_color)
  {
    GeglFillOp * self = GEGL_FILL_OP(GET_NEW);

    /*Call the constructor */
    if (!constructor(self, dest, dest_rect, fill_color))
      return NULL;
    
    /*Okay its constructed*/
    GEGL_OBJECT(self)->constructed = TRUE;

    return self;
  }

  protected 
  gboolean 
  constructor(self, 
              GeglImageBuffer *dest, 
              GeglRect *dest_rect,
              GeglColor *color)
  {

    GeglChannelDataType data_type;
    GeglColorSpace color_space;
    GeglColorModel *cm; 
    GeglPointOp *point_op = GEGL_POINT_OP (self);
    GeglPointOpClass *point_op_class = 
        GEGL_POINT_OP_CLASS(GTK_OBJECT(point_op)->klass);
    
    if(GEGL_OBJECT(self)->constructed) 
      return FALSE;
    
    /* Chain up */
    if (!gegl_point_op_constructor (
         GEGL_POINT_OP(self), &dest, dest_rect, 1))
      return FALSE;

    /*
      Now based on the image buffers's color model(s)/data storage(s)
      choose one of our scanline funcs to install
      This is where some "autogeneration" happens.
    */ 

    cm = gegl_image_buffer_color_model (dest);
    data_type = gegl_color_model_data_type (cm);
    color_space = gegl_color_model_color_space (cm);

    point_op_class->scanline_func = gegl_fill_op_COLORSPACE_DATATYPE;

    /* Allocate a color and set its channels to the passed one */  
    {
      GeglColorModel *cm = gegl_color_get_color_model (color);
      self->_priv->fill_color = gegl_color_new (cm); 
      gegl_color_set (self->_priv->fill_color, color);
    }

    return TRUE;
  }

  override (Gtk:Object) 
  void 
  destroy (GtkObject *object)
  {
    GeglFillOp * self = GEGL_FILL_OP(object); 

    /* Dispose of the fill color*/
    gegl_object_destroy(GEGL_OBJECT(self->_priv->fill_color));

    /* Chain up on destroy */
    PARENT_HANDLER (object)
  }

  private
  void
  COLORSPACE_DATATYPE (GeglPointOp *point_op)
  {
    /*
        Whats the algorithm for this code?
        DEST = CONST

    */
    guint width;
    GENERIC_IMAGE_DECL_BEGIN
    Pixel dest(color,alpha,has_alpha);
    GENERIC_IMAGE_DECL_END

    GeglFillOp *self = GEGL_FILL_OP (point_op);
    GeglPointOpPrivate *point_opP = (GeglPointOpPrivate *)(point_op->_priv);

    GeglChannelValue *fill_values = gegl_color_get_channel_values(
                                   self->_priv->fill_color,
				   &dest_pixelstride);
 

    dest_has_alpha = gegl_color_model_has_alpha(
	        gegl_image_buffer_color_model (((GeglOp*)point_op)->_priv->image_buffers[0]));
    
    width = point_opP->scanline_width;

    /* image_buffers[0] is the dest here */
    gegl_image_iterator_get_scanline_data (point_opP->iterators[0],
                (guchar**)dest_data);

    /* Make g point to the dest image data */
    GENERIC_IMAGE_IMAGE_DATA_INIT

    /* Fill the dest with the fill color */
    while (width--)
    {
      GENERIC_IMAGE_BLOCK_BEGIN
      dest_color = PIXEL_INIT (fill_values);
      if (dest_has_alpha)
	{
	  dest_alpha = PIXEL_INIT (fill_values);
        }
      dX(dest,1); 
      GENERIC_IMAGE_BLOCK_END
    }
  } 
}
