/* fldskjflksjd sdfjlskfjlsdkfjdslkjfsldkfjdlskf */
{
       GENERIC_IMAGE_DECL_BEGIN
 
       Channel a ;
       Pixel s(color,alpha); 
       Pixel d(color,alpha), s1(color,alpha), s2(color,alpha), s3(color,alpha); 
       Pixel dest(color,alpha);
       Pixel src1(color,alpha);
       Pixel src2(color,alpha);
       Pixel c(color,alpha);
       Channel g[4], h[2];
       Channel f;
       GENERIC_IMAGE_DECL_END

       GENERIC_IMAGE_BLOCK_BEGIN

             d = s1 * s2;

              d = CHANNEL_CLAMP(5 * s);

              d = (s1 + s2 + s3)/3;

              d = s * s1 + (WP-s) * s2;

              d = CHANNEL_CLAMP(s1 * s2 + s3);

              d = .333 * (s1 + s2 + s3); 

              dest = WP - ((WP - src1) * (WP - src2));
}
{
              dest = MAX(src1, src2);

              dest = MIN(src1, src2);

              dest = MAX(src1, src2);

              dest = src1 * src2;

              dest = CHANNEL_CLAMP(src1 - src2);

              dest = ABS(src1 - src2);

              dest = MIN(src1, src2);

              dest = CHANNEL_CLAMP(src1 + src2);

              dest_alpha = CHANNEL_CLAMP(src1_alpha + src2_alpha);

              dest = dest_alpha * dest; 

              c_color = c_color * c_color;

              f = f * 0.5;

              c_color = c_color * f;

              c_color = c_color / c_color;

              c = f / f;

              c = f / c;

              c = c / f;

              c = 5.0 * c;

              c = 5 * c;

              c = c / 5.0;

              c_color = c_color / 5.0; 

              c_color = c_color / 5;

              c_color = c_color + c_color;

              f = f + c_alpha;

              c_color = c_color + f;

              c_color = c_color;

              c_color = f;

              g = c;

              g = h;

       GENERIC_IMAGE_BLOCK_END

}
