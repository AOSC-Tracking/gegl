/* PyGEGL - Python bindings for the GEGL image processing library
 * Copyright (C) 2007 Manish Singh
 *
 *   gegl.override: overrides for the PyGEGL module
 *
 * PyGEGL is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * PyGEGL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with PyGEGL; if not, see <http://www.gnu.org/licenses/>.
 */

/* Portions of this are derived from parts of the PyGTK project */
%%
headers
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>

/* XXX: Workaround bad definition of pyg_param_gvalue_as_pyobject */
#undef pyg_param_gvalue_as_pyobject
#define pyg_param_gvalue_as_pyobject (_PyGObject_API->param_gvalue_as_pyobject)

#include <gegl.h>
#include <gegl/gegl-utils.h>
%%
include
  geglrectangle.override
%%
modulename Gegl
%%
import gobject.GObject as PyGObject_Type
%%
ignore
  gegl_init
  gegl_get_option_group
%%
ignore-glob
  *_get_type
%%
ignore
  gegl_node_link_many
  gegl_node_set
  gegl_node_get
  gegl_node_blit
  gegl_node_new_from_file
  gegl_node_to_xml
  gegl_processor_destroy
  gegl_node_new_from_file
%%
ignore-glob
  gegl_log_*
%%
body
gboolean
pygegl_rectangle_from_pyobject(PyObject *object, GeglRectangle *rectangle)
{
    g_return_val_if_fail(rectangle != NULL, FALSE);

    if (pyg_boxed_check(object, GEGL_TYPE_RECTANGLE)) {
        *rectangle = *pyg_boxed_get(object, GeglRectangle);
        return TRUE;
    }
    if (PyArg_ParseTuple(object, "iiii",
                         &rectangle->x, &rectangle->y,
                         &rectangle->width, &rectangle->height)) {
        return TRUE;
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError, "could not convert to GeglRectangle");
    return FALSE;
}

static gboolean
pygegl_set_property_from_pspec(GeglNode *node, char *prop_name,
                               GParamSpec *pspec, PyObject *pvalue)
{
    GValue value = { 0, };

    if (!(pspec->flags & G_PARAM_WRITABLE)) {
        PyErr_Format(PyExc_TypeError,
                     "property '%s' is not writable",
                     prop_name);
        return FALSE;
    }

    g_value_init(&value, G_PARAM_SPEC_VALUE_TYPE(pspec));
    if (pyg_param_gvalue_from_pyobject(&value, pvalue, pspec) < 0) {
        PyErr_SetString(PyExc_TypeError,
                        "could not convert argument to correct property type");
        return FALSE;
    }

    pyg_begin_allow_threads;
    gegl_node_set_property(node, prop_name, &value);
    pyg_end_allow_threads;

    g_value_unset(&value);

    return TRUE;
}

static gboolean
pygegl_set_property(GeglNode *node, char *prop_name, PyObject *pvalue)
{
    GParamSpec *pspec;

    pspec = gegl_node_find_property(node, prop_name);
    if (!pspec) {
        PyErr_Format(PyExc_TypeError,
                     "operation does not have property '%s'",
                     prop_name);
        return FALSE;
    }

    return pygegl_set_property_from_pspec(node, prop_name, pspec, pvalue);
}
%%
override gegl_color_get_rgba noargs
static PyObject *
_wrap_gegl_color_get_rgba(PyGObject *self)
{
    float r, g, b, a;
    gegl_color_get_rgba(GEGL_COLOR(self->obj), &r, &g, &b, &a);
    return Py_BuildValue("ffff", r, g, b, a);
}
%%
override gegl_list_operations noargs
static PyObject *
_wrap_gegl_list_operations(PyObject *self)
{
    guint n_operations, i;
    char **operations;
    PyObject *ret;

    operations = gegl_list_operations(&n_operations);

    ret = PyTuple_New(n_operations);
    if (!ret) {
        g_free(operations);
        return NULL;
    }

    for (i = 0; i < n_operations; i++)
        PyTuple_SetItem(ret, i, PyString_FromString(operations[i]));

    g_free(operations);

    return ret;
}
%%
override gegl_list_properties kwargs
static PyObject *
_wrap_gegl_list_properties(PyObject *self, PyObject *args, PyObject *kwargs)
{
    char *operation;
    guint n_properties, i;
    GParamSpec **properties;
    PyObject    *ret;

    static char *kwlist[] = { "operation", NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "s:list_properties", kwlist,
                                     &operation))
        return NULL;

    properties = gegl_list_properties(operation, &n_properties);

    ret = PyTuple_New(n_properties);
    if (!ret) {
        g_free(properties);
        return NULL;
    }

    for (i = 0; i < n_properties; i++)
        PyTuple_SetItem(ret, i, pyg_param_spec_new(properties[i]));

    g_free(properties);

    return ret;
}
%%
override gegl_node_find_property args
static PyObject *
_wrap_gegl_node_find_property(PyGObject *self, PyObject *args)
{
    char *prop_name;
    GParamSpec *pspec;

    if (!PyArg_ParseTuple(args, "s:GeglNode.find_property", &prop_name))
        return NULL;

    pspec = gegl_node_find_property(GEGL_NODE(self->obj), prop_name);

    if (!pspec) {
        PyErr_Format(PyExc_TypeError,
                     "operation does not have property '%s'",
                     prop_name);
        return NULL;
    }

    return pyg_param_spec_new(pspec);
}
%%
override gegl_node_get_children noargs
static PyObject *
_wrap_gegl_node_get_children(PyGObject *self)
{
    GSList *children, *l;
    PyObject *py_list;

    children = gegl_node_get_children(GEGL_NODE(self->obj));

    py_list = PyList_New(0);
    if (!py_list) {
        g_slist_free(children);
        return NULL;
    }

    for (l = children; l; l = l->next) {
        PyObject *item = pygobject_new(G_OBJECT(l->data));

        if (!item) {
            g_slist_free(children);
            Py_DECREF(py_list);
            return NULL;
        }

        PyList_Append(py_list, item);
        Py_DECREF(item);
    }

    g_slist_free(children);
    return py_list;
}
%%
override gegl_node_get_consumers kwargs
static PyObject *
_wrap_gegl_node_get_consumers(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    char *output_pad;
    int count, i;
    GeglNode **nodes = NULL;
    const char **pads = NULL;
    PyObject *py_list;

    static char *kwlist[] = { "output_pad", NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "s:GeglNode.get_consumers", kwlist,
                                     &output_pad))
        return NULL;

    count = gegl_node_get_consumers(GEGL_NODE(self->obj), output_pad,
                                    &nodes, &pads);

    py_list = PyList_New(count);
    if (!py_list)
        goto cleanup;

    for (i = 0; i < count; i++) {
        PyObject *o = NULL;
        PyObject *v = Py_BuildValue("Ns",
                                    o=pygobject_new(G_OBJECT(nodes[i])),
                                    pads[i]);

        if (!v) {
            Py_XDECREF(o);
            Py_DECREF(py_list);
            py_list = NULL; 
            goto cleanup;
        }

        PyList_SetItem(py_list, i, v);
    }

cleanup:
    if (nodes)
        g_free(nodes);

    if (pads)
        g_free(pads);

    return py_list;
}
%%
override gegl_node_get_producer kwargs
static PyObject *
_wrap_gegl_node_get_producer(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    char *input_pad, *output_pad;
    GeglNode *node;

    static char *kwlist[] = { "input_pad", NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "s:GeglNode.get_producer", kwlist,
                                     &input_pad))
        return NULL;

    node = gegl_node_get_producer(GEGL_NODE(self->obj), input_pad, &output_pad);

    if (node) {
        return Py_BuildValue("Ns", pygobject_new((GObject *)node), &output_pad);
    } else {
        Py_INCREF(Py_None);
        return Py_None;
    }
}
%%
override gegl_node_get_property args
static PyObject *
_wrap_gegl_node_get_property(PyGObject *self, PyObject *args)
{
    char *prop_name;
    GValue value = { 0, };
    GParamSpec *pspec;
    PyObject *ret;

    if (!PyArg_ParseTuple(args, "s:GeglNode.get_property", &prop_name))
        return NULL;

    pspec = gegl_node_find_property(GEGL_NODE(self->obj), prop_name);

    if (!pspec) {
        PyErr_Format(PyExc_TypeError,
                     "operation does not have property '%s'",
                     prop_name);
        return NULL;
    }

    if (!(pspec->flags & G_PARAM_READABLE)) {
        PyErr_Format(PyExc_TypeError, "property '%s' is not readable",
                     prop_name);
        return NULL;
    }

    g_value_init(&value, G_PARAM_SPEC_VALUE_TYPE(pspec));
    gegl_node_get_property(GEGL_NODE(self->obj), prop_name, &value);
    ret = pyg_param_gvalue_as_pyobject(&value, TRUE, pspec);
    g_value_unset(&value);

    return ret;
}
%%
override gegl_node_set_property args
static PyObject *
_wrap_gegl_node_set_property(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    char *prop_name;
    PyObject *pvalue;

    if (!PyArg_ParseTuple(args, "sO:GeglNode.set_property",
                                &prop_name, &pvalue))
        return NULL;

    if (!pygegl_set_property(GEGL_NODE(self->obj), prop_name, pvalue))
        return NULL;

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gegl_processor_work noargs
static PyObject *
_wrap_gegl_processor_work(PyGObject *self)
{
    gboolean more_work;
    double progress;

    more_work = gegl_processor_work(GEGL_PROCESSOR(self->obj), &progress);

    return Py_BuildValue("Od", more_work ? Py_True : Py_False, progress);
}
%%
define GeglNode.render kwargs
static PyObject *
_wrap_gegl_node_render(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    GeglRectangle roi;
    PyObject *py_roi = NULL;
    double scale = 1.0;
    Babl *format;
    char *format_str;
    GeglBlitFlags flags = GEGL_BLIT_DEFAULT;
    char *buf;
    Py_ssize_t buflen;

    static char *kwlist[] = { "roi", "format", "scale", "flags", NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "Os|di:GeglNode.render", kwlist,
                                     &py_roi, &format_str, &scale, &flags))
        return NULL;

    if (!pyg_boxed_check(py_roi, GEGL_TYPE_RECTANGLE)) {
        if (!pygegl_rectangle_from_pyobject(py_roi, &roi)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_TypeError,
                            "roi must be a GeglRectangle or 4-tuple");
            return NULL;
        }
    } else {
        roi = *pyg_boxed_get(py_roi, GeglRectangle);
    }

    format = babl_format(format_str);
    if (!format) {
        PyErr_SetString(PyExc_TypeError, "format is invalid");
        return NULL;
    }

    buflen = roi.width * roi.height * format->format.bytes_per_pixel;
    buf = g_try_malloc(buflen);
    if (!buf) {
        PyErr_SetString(PyExc_MemoryError,
                        "could not allocate destination buffer");
        return NULL;
    }

    gegl_node_blit(GEGL_NODE(self->obj), scale, &roi, format, buf, 0, flags);

    return PyString_FromStringAndSize(buf, buflen);
}
%%
override gegl_node_link args
static PyObject *
_wrap_gegl_node_link(PyGObject *self, PyObject *args)
{
    PyObject *source = (PyObject *)self;
    int numargs, i;

    numargs = PyTuple_Size(args);
    if (numargs < 1) {
        PyErr_SetString(PyExc_TypeError,
                        "link() must have at least one argument");
        return NULL;
    }

    for (i = 0; i < numargs; i++) {
        PyObject *sink = PyTuple_GetItem(args, i);

        if (!pygobject_check(sink, &PyGeglNode_Type)) {
            PyErr_Format(PyExc_TypeError, "argument %d is not a GeglNode", i);
            return NULL; 
        }

        gegl_node_connect_to(GEGL_NODE(pygobject_get(source)), "output",
                             GEGL_NODE(pygobject_get(sink)), "input");
        source = sink;
    }

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gegl_node_new_child kwargs
static PyObject *
_wrap_gegl_node_new_child(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    char *operation = NULL;
    PyObject *key, *item;
    Py_ssize_t i = 0;
    GeglNode *node;
    PyObject *py_node;

    if (!PyArg_ParseTuple(args, "|s:GeglNode.new_child", &operation))
        return NULL;

    if (kwargs) {
        item = PyDict_GetItemString(kwargs, "operation");
        if (item) {
            operation = PyString_AsString(item);
            if (operation == NULL) {
                PyErr_SetString(PyExc_TypeError,
                                "operation must be a string");
                return NULL;
            }
        }
    }

    if (operation == NULL) {
        PyErr_SetString(PyExc_TypeError, "no operation specified");
        return NULL;
    }

    node = gegl_node_create_child(GEGL_NODE(self->obj), operation);
    if (!node) {
        PyErr_SetString(PyExc_TypeError, "operation is invalid");
        return NULL;
    }

    if (kwargs) {
        while (PyDict_Next(kwargs, &i, &key, &item)) {
            char *prop_name = PyString_AsString(key);
            if (strcmp(prop_name, "operation") != 0) {
                if (!pygegl_set_property(node, prop_name, item)) {
                    g_object_unref(node);
                    return NULL;
                }
            }
        }
    }

    return pygobject_new(G_OBJECT(node));
}
%%
define GeglNode.lookup args
static PyObject *
_wrap_gegl_node_lookup(PyGObject *self, PyObject *args)
{
    GSList *children, *l;
    char *lookup_name;

    if (!PyArg_ParseTuple(args, "s:GeglNode.lookup", &lookup_name))
        return NULL;
  
    children = gegl_node_get_children(GEGL_NODE(self->obj));

    for (l = children; l; l = l->next) {
        GeglNode *child = GEGL_NODE(l->data);
        char *name = NULL;

        gegl_node_get(child, "name", &name, NULL);

        if (strcmp(name, lookup_name) == 0) {
            g_slist_free(children);
            return pygobject_new(G_OBJECT(child));
        }
    }

    g_slist_free(children);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gegl_node_new_from_xml kwargs
static PyObject *
_wrap_gegl_node_new_from_xml(PyObject *self, PyObject *args, PyObject *kwargs)
{
    char *xmldata, *path_root = "";
    GeglNode *node;
    PyObject *py_node;

    static char *kwlist[] = { "xmldata", "path_root", NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "s|z:parse_xml", kwlist,
                                     &xmldata, &path_root))
        return NULL;

    if (path_root == NULL)
        path_root = "";

    node = gegl_node_new_from_xml(xmldata, path_root);

    if (!node) {
        PyErr_SetString(PyExc_RuntimeError, "Error processing XML");
        return NULL;
    }

    py_node = pygobject_new(G_OBJECT(node));
    g_object_unref(node);

    return py_node;
}
