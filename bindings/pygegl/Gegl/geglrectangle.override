/* PyGEGL - Python bindings for the GEGL image processing library
 * Copyright (C) 2007 Manish Singh
 *
 *   geglrectangle.override: Gegl.Rectangle overrides
 *
 * PyGEGL is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * PyGEGL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with PyGEGL; if not, see <http://www.gnu.org/licenses/>.
 */

/* This is heavily derived from gdkrectangle.override in PyGTK */
%%
ignore
  gegl_rectangle_copy
%%
override gegl_rectangle_new kwargs
static int
_wrap_gegl_rectangle_new(PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", "width", "height", NULL };
    GeglRectangle rect = {0, 0, 0, 0};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "|iiii:GeglRectangle.__init__",
                                     kwlist, &(rect.x), &(rect.y),
                                     &(rect.width), &(rect.height)))
        return -1;

    self->boxed = g_boxed_copy(GEGL_TYPE_RECTANGLE, &rect);
    self->free_on_dealloc = TRUE;
    self->gtype = GEGL_TYPE_RECTANGLE;

    return 0;
}
%%
override-slot GeglRectangle.tp_as_sequence
static Py_ssize_t
_wrap_gegl_rectangle_length(PyGBoxed *self)
{
    return 4;
}
static PyObject *
_wrap_gegl_rectangle_getitem(PyGBoxed *self, Py_ssize_t pos)
{
    GeglRectangle *rect;

    if (pos < 0) pos += 4;
    if (pos < 0 || pos >= 4) {
        PyErr_SetString(PyExc_IndexError, "index out of range");
        return NULL;
    }
    rect = pyg_boxed_get(self, GeglRectangle);
    switch (pos) {
    case 0: return PyInt_FromLong(rect->x);
    case 1: return PyInt_FromLong(rect->y);
    case 2: return PyInt_FromLong(rect->width);
    case 3: return PyInt_FromLong(rect->height);
    default:
        g_assert_not_reached();
        return NULL;
    }
}
static int
_wrap_gegl_rectangle_setitem(PyGBoxed *self, Py_ssize_t pos, PyObject *value)
{
    GeglRectangle *rect;
    gint val;

    if (pos < 0) pos += 4;
    if (pos < 0 || pos >= 4) {
        PyErr_SetString(PyExc_IndexError, "index out of range");
        return -1;
    }
    rect = pyg_boxed_get(self, GeglRectangle);
    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    switch(pos) {
    case 0: rect->x      = val; break;
    case 1: rect->y      = val; break;
    case 2: rect->width  = val; break;
    case 3: rect->height = val; break;
    default:
        g_assert_not_reached();
        return -1;
    }
    return 0;
}
static PySequenceMethods _wrap_gegl_rectangle_tp_as_sequence = {
    (lenfunc)_wrap_gegl_rectangle_length,
    0,
    0,
    (ssizeargfunc)_wrap_gegl_rectangle_getitem,
    0,
    (ssizeobjargproc)_wrap_gegl_rectangle_setitem,
    0,
};
%%
override-attr GeglRectangle.x
static int
_wrap_gegl_rectangle__set_x(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GeglRectangle)->x = val;
    return 0;
}
%%
override-attr GeglRectangle.y
static int
_wrap_gegl_rectangle__set_y(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GeglRectangle)->y = val;
    return 0;
}
%%
override-attr GeglRectangle.width
static int
_wrap_gegl_rectangle__set_width(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GeglRectangle)->width = val;
    return 0;
}
%%
override-attr GeglRectangle.height
static int
_wrap_gegl_rectangle__set_height(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GeglRectangle)->height = val;
    return 0;
}
%%
override gegl_rectangle_intersect kwargs
static PyObject *
_wrap_gegl_rectangle_intersect(PyGObject *self, PyObject *args,
                               PyObject *kwargs)
{
    static char *kwlist[] = { "src", NULL };
    PyObject *py_src;
    GeglRectangle src, dest = {0, 0, 0, 0};
    gboolean ret;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:GeglRectangle.intersect",
                                     kwlist, &py_src)) {
        return NULL;
    }
    
    if (!pyg_boxed_check(py_src, GEGL_TYPE_RECTANGLE)) {
        if (!pygegl_rectangle_from_pyobject(py_src, &src)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_TypeError,
                            "src must be a GeglRectangle or 4-tuple");
            return NULL;
        }
    } else {
        src = *pyg_boxed_get(py_src, GeglRectangle);
    }

    ret = gegl_rectangle_intersect(&dest, pyg_boxed_get(self, GeglRectangle),
                                   &src);

    if (ret) {
      return pyg_boxed_new(GEGL_TYPE_RECTANGLE, &dest, TRUE, TRUE);
    } else {
      Py_INCREF(Py_None);
      return Py_None;
    }
}
