;; -*- scheme -*-
; Could not write method GeglProcessor.work: No ArgType for gdouble*
;Warning: generating old-style constructor for:gegl_color_new
; Could not write method GeglNode.find_property: No ArgType for GParamSpec*
;-Could not write method GeglNode.get: varargs functions not supported
;-Could not write method GeglNode.get_consumers: No ArgType for GeglNode***
;xCould not write method GeglNode.get_producer: No ArgType for gchar**
;xCould not write function properties: No ArgType for guint*
;Warning: Constructor for GeglColor needs to be updated to new API
;         See http://live.gnome.org/PyGTK_2fWhatsNew28#update-constructors
;***INFO*** The coverage of global functions is 75.00% (3/4)
;***INFO*** The coverage of methods is 83.87% (26/31)
;***INFO*** There are no declared virtual proxies.
;***INFO*** There are no declared virtual accessors.
;***INFO*** There are no declared interface proxies.


; object definitions ...
(define-object Color
  (in-module "Gegl")
  (parent "GObject")
  (c-name "GeglColor")
  (gtype-id "GEGL_TYPE_COLOR")
)

(define-object Node
  (in-module "Gegl")
  (parent "GObject")
  (c-name "GeglNode")
  (gtype-id "GEGL_TYPE_NODE")
)

(define-boxed GeglRectangle
  (in-module "Gegl")
  (c-name "GeglRectangle")
  (gtype-id "GEGL_TYPE_RECTANGLE")
)

(define-boxed GeglProcessor
  (in-module "Gegl")
  (c-name "GeglProcessor")
  (gtype-id "GEGL_TYPE_PROCESSOR")
)


;; Enumerations and flags ...

;(define-flags BlitFlags
;  (in-module "Gegl")
;  (c-name "GeglBlitFlags")
;  (gtype-id "GEGL_TYPE_BLIT_FLAGS")
;  (values
;    '("default" "GEGL_BLIT_DEFAULT")
;    '("cache" "GEGL_BLIT_CACHE")
;    '("dirty" "GEGL_BLIT_DIRTY")
;  )
;)


;; From gegl.h

;This is not meant to be bound as a method callable from Python.
;(define-function gegl_exit
;  (c-name "gegl_exit")
;  (return-type "none")
;)

(define-function gegl_node_get_type
  (c-name "gegl_node_get_type")
  (return-type "GType")
)

(define-function gegl_rectangle_get_type
  (c-name "gegl_rectangle_get_type")
  (return-type "GType")
)

(define-function gegl_node_new
  (c-name "gegl_node_new")
  (is-constructor-of "GeglNode")
  (return-type "GeglNode*")
)

(define-method new_child
  (of-object "GeglNode")
  (c-name "gegl_node_new_child")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method connect_from
  (of-object "GeglNode")
  (c-name "gegl_node_connect_from")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "input_pad_name")
    '("GeglNode*" "source")
    '("const-gchar*" "output_pad_name")
  )
)

(define-method connect_to
  (of-object "GeglNode")
  (c-name "gegl_node_connect_to")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "output_pad_name")
    '("GeglNode*" "sink")
    '("const-gchar*" "input_pad_name")
  )
)

;This link combines the behaviour of link and link_many
(define-method link
  (of-object "GeglNode")
  (c-name "gegl_node_link")
  (return-type "none")
  (parameters
    '("GeglNode*" "first_sink")
  )
  (varargs #t)
)

;This is the original definition of link
;(define-method link
;  (of-object "GeglNode")
;  (c-name "gegl_node_link")
;  (return-type "none")
;  (parameters
;    '("GeglNode*" "sink")
;  )
;)

;This is the original definition of link_many
;(define-method link_many
;  (of-object "GeglNode")
;  (c-name "gegl_node_link_many")
;  (return-type "none")
;  (parameters
;    '("GeglNode*" "first_sink")
;  )
;  (varargs #t)
;)

(define-method disconnect
  (of-object "GeglNode")
  (c-name "gegl_node_disconnect")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "input_pad")
  )
)

(define-method set
  (of-object "GeglNode")
  (c-name "gegl_node_set")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

;(define-method blit
;  (of-object "GeglNode")
;  (c-name "gegl_node_blit")
;  (return-type "none")
;  (parameters
;    '("GeglRectangle*" "roi")
;    '("gdouble" "scale")
;    '("void*" "format")
;    '("gint" "rowstride")
;    '("gpointer*" "destination_buf")
;    '("GeglBlitFlags" "flags")
;    '("gint" "flags")
;  )
;)

(define-method process
  (of-object "GeglNode")
  (c-name "gegl_node_process")
  (return-type "none")
)

(define-function gegl_processor_get_type
  (c-name "gegl_processor_get_type")
  (return-type "GType")
)

(define-method new_processor
  (of-object "GeglNode")
  (c-name "gegl_node_new_processor")
  (return-type "GeglProcessor*")
  (parameters
    '("GeglRectangle*" "rectangle")
  )
)

(define-method set_rectangle
  (of-object "GeglProcessor")
  (c-name "gegl_processor_set_rectangle")
  (return-type "none")
  (parameters
    '("GeglRectangle*" "rectangle")
  )
)

(define-method work
  (of-object "GeglProcessor")
  (c-name "gegl_processor_work")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "progress")
  )
)

(define-method destroy
  (of-object "GeglProcessor")
  (c-name "gegl_processor_destroy")
  (return-type "none")
)

(define-function operations
  (c-name "operations")
  (return-type "gchar**")
  (parameters
    '("guint*" "n_operations_p")
  )
)

(define-function properties
  (c-name "properties")
  (return-type "GParamSpec**")
  (parameters
    '("const-gchar*" "operation_type")
    '("guint*" "n_properties_p")
  )
)

(define-function property_names
  (c-name "property_names")
  (return-type "gchar**")
  (parameters
    '("const-gchar*" "operation_type")
    '("guint*" "n_properties_p")
  )
)

(define-method detect
  (of-object "GeglNode")
  (c-name "gegl_node_detect")
  (return-type "GeglNode*")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method find_property
  (of-object "GeglNode")
  (c-name "gegl_node_find_property")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method get
  (of-object "GeglNode")
  (c-name "gegl_node_get")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method get_bounding_box
  (of-object "GeglNode")
  (c-name "gegl_node_get_bounding_box")
  (return-type "GeglRectangle")
)

(define-method get_children
  (of-object "GeglNode")
  (c-name "gegl_node_get_children")
  (return-type "GSList*")
)

(define-method get_consumers
  (of-object "GeglNode")
  (c-name "gegl_node_get_consumers")
  (return-type "gint")
  (parameters
    '("const-gchar*" "output_pad")
    '("GeglNode***" "nodes")
    '("const-gchar***" "pads")
  )
)

(define-method get_input_proxy
  (of-object "GeglNode")
  (c-name "gegl_node_get_input_proxy")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "pad_name")
  )
)

(define-method get_operation
  (of-object "GeglNode")
  (c-name "gegl_node_get_operation")
  (return-type "const-gchar*")
)

(define-method get_output_proxy
  (of-object "GeglNode")
  (c-name "gegl_node_get_output_proxy")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "pad_name")
  )
)

(define-method get_producer
  (of-object "GeglNode")
  (c-name "gegl_node_get_producer")
  (return-type "GeglNode*")
  (parameters
    '("gchar*" "input_pad_name")
    '("gchar**" "output_pad_name")
  )
)

(define-function parse_xml
  (c-name "gegl_parse_xml")
  (return-type "GeglNode*")
  (parameters
    '("const-gchar*" "xmldata")
    '("const-gchar*" "path_root")
  )
)

(define-method to_xml
  (of-object "GeglNode")
  (c-name "gegl_to_xml")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "path_root")
  )
)

(define-function gegl_color_get_type
  (c-name "gegl_color_get_type")
  (return-type "GType")
)

(define-function gegl_color_new
  (c-name "gegl_color_new")
  (is-constructor-of "GeglColor")
  (return-type "GeglColor*")
  (properties
    '("color" (argname "color"))
;  (parameters
;    '("const-gchar*" "color")
  )
)

(define-method get_rgba
  (of-object "GeglColor")
  (c-name "gegl_color_get_rgba")
  (return-type "none")
  (parameters
    '("gfloat*" "r")
    '("gfloat*" "g")
    '("gfloat*" "b")
    '("gfloat*" "a")
  )
)

(define-method set_rgba
  (of-object "GeglColor")
  (c-name "gegl_color_set_rgba")
  (return-type "none")
  (parameters
    '("gfloat" "r")
    '("gfloat" "g")
    '("gfloat" "b")
    '("gfloat" "a")
  )
)

;This is not meant to be bound as a method callable from Python.
;from the new_child method.
;(define-method create_child
;  (of-object "GeglNode")
;  (c-name "gegl_node_create_child")
;  (return-type "GeglNode*")
;  (parameters
;    '("const-gchar*" "operation")
;  )
;)

;This is not meant to be bound as a method callable from Python.
;(define-method get_property
;  (of-object "GeglNode")
;  (c-name "gegl_node_get_property")
;  (return-type "none")
;  (parameters
;    '("const-gchar*" "property_name")
;    '("GValue*" "value")
;  )
;)

;This is not meant to be bound as a method callable from Python.
;(define-method set_property
;  (of-object "GeglNode")
;  (c-name "gegl_node_set_property")
;  (return-type "none")
;  (parameters
;    '("const-gchar*" "property_name")
;    '("const-GValue*" "value")
;  )
;)


;; From gegl-utils.h

(define-method set
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_set")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("guint" "w")
    '("guint" "h")
  )
)

(define-method equal
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_equal")
  (return-type "gboolean")
  (parameters
    '("GeglRectangle*" "s")
  )
)

(define-method equal_coords
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_equal_coords")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "w")
    '("gint" "h")
  )
)

(define-method copy
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_copy")
  (return-type "none")
  (parameters
    '("GeglRectangle*" "from")
  )
)

(define-method bounding_box
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_bounding_box")
  (return-type "none")
  (parameters
    '("GeglRectangle*" "src1")
    '("GeglRectangle*" "src2")
  )
)

(define-method intersect
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_intersect")
  (return-type "gboolean")
  (parameters
    '("GeglRectangle*" "src1")
    '("GeglRectangle*" "src2")
  )
)

(define-method contains
  (of-object "GeglRectangle")
  (c-name "gegl_rectangle_contains")
  (return-type "gboolean")
  (parameters
    '("GeglRectangle*" "s")
  )
)

(define-function gegl_rectangle_get_type
  (c-name "gegl_rectangle_get_type")
  (return-type "GType")
)
